{"version":3,"sources":["webpack:///./src/pages/guides/continuous-integration/index.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","PageHeader","title","tabs","className","cx","pageHeader","withTabs","length","id","text","EditLink","relativePagePath","repositoryProp","repository","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","Title","frontmatter","titleType","theme","description","keywords","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","BackToTopBtn"],"mappings":"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","file":"component---src-pages-guides-continuous-integration-index-mdx-885fd89e612fdce197c7.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mjperrins/projects/cat/guide/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Continous integration is a software development technique where software is built regularly by a team in an automated fashion.\nThis quote helps explain it:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Continuous Integration is a software development practice where members of a team integrate their work frequently,\nusually each person integrates at least daily - leading to multiple integrations per day.\nEach integration is verified by an automated build (including test) to\ndetect integration errors as quickly as possible. Many teams find that this approach leads to significantly\nreduced integration problems and allows a team to develop cohesive software more rapidly`}</p>\n      <cite>– Martin Fowler</cite>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"what-is-jenkins\"\n    }}>{`What is Jenkins`}</h2>\n    <p>{`Jenkins is a self-contained, open source automation server which can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software.\nIt is a perfect tool for helping managing continuous integration tasks for a wide range of software component’s.`}</p>\n    <p>{`Jenkins Pipeline (or simply “Pipeline”) is a suite of plugins which supports implementing and integrating continuous delivery pipelines into Jenkins.`}</p>\n    <p>{`A continuous delivery pipeline is an automated expression of your process for getting software from version control right through to your users and customers.`}</p>\n    <p>{`Jenkins Pipeline provides an extensible set of tools for modeling simple-to-complex delivery pipelines “as code”. The definition of a Jenkins Pipeline is typically written into a text file (called a `}<a parentName=\"p\" {...{\n        \"href\": \"https://jenkins.io/doc/pipeline/tour/hello-world/\"\n      }}>{`Jenkinsfile`}</a>{`) which in turn is checked into a project’s source control repository.`}</p>\n    <h3 {...{\n      \"id\": \"pipelines\"\n    }}>{`Pipelines`}</h3>\n    <p>{`Pipelines offer a set of stages or steps that can be chained together to allow a level of software\nautomation. This automation can be tailored to the specific project requirements.`}</p>\n    <h3 {...{\n      \"id\": \"stages\"\n    }}>{`Stages`}</h3>\n    <p>{`You can see from either the vanilla Jenkins pipelines view of the Application Console pipelines view, each template offers a number of pipeline stages. The stages have been configured to be work from the defined `}<inlineCode parentName=\"p\">{`secrets`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`config maps`}</inlineCode>{` that have been defined in the Development cluster setup.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Jenkinsfile`}</inlineCode>{` is consistent between registration with OpenShift or IKS. The `}<inlineCode parentName=\"p\">{`Dockerfile`}</inlineCode>{` has been optimized for `}<inlineCode parentName=\"p\">{`UBI`}</inlineCode>{` images, this means the docker images when deployed can run on both OpenShift and IKS.`}</p>\n    <p>{`The following gives a description of what each stage in the pipeline does. The `}<em parentName=\"p\">{`Optional`}</em>{` stages can be deleted or ignored if the tool support it is not installed. These stages represent a typical production pipeline flow for a Cloud Native application.`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Setup`}</strong>{` clones the code into the pipeline`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Build`}</strong>{` runs the build commands for the code`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Test`}</strong>{`\tvalidates the unit tests for the code`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Publish pacts`}</strong>{`\t(`}<em parentName=\"li\">{`optional`}</em>{`) publishes any pact contracts that have been defined`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Verify pact`}</strong>{` (`}<em parentName=\"li\">{`optional`}</em>{`) verifies the pact contracts`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Sonar scan`}</strong>{` (`}<em parentName=\"li\">{`optional`}</em>{`) runs a sonar code scan of the source code and publishes the results to SonarQube`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Verify environment`}</strong>{` Validates the OpenShift or IKS environment configuration is valid`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Build image`}</strong>{` Builds the code into a Docker images and stores it in the IBM Cloud Image registry`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Deploy to DEV env`}</strong>{`\tDeploys the Docker image tagged version to `}<inlineCode parentName=\"li\">{`dev`}</inlineCode>{` namespace using Helm Chart`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Health Check`}</strong>{` Validates the Health Endpoint of the deployed application`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Package Helm Chart`}</strong>{` (`}<em parentName=\"li\">{`optional`}</em>{`) Stores the tagged version of the Helm chart into Artifactory`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Trigger CD Pipeline`}</strong>{` (`}<em parentName=\"li\">{`optional`}</em>{`) This is a GitOps stage that will update the build number in designated git repo and trigger ArgoCD for deployment to `}<strong parentName=\"li\">{`test`}</strong></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"registering-pipelines\"\n    }}>{`Registering Pipelines`}</h2>\n    <p>{`Once you become familiar with deploying code into OpenShift or IKS, read up about how you can manage code deployment with `}<inlineCode parentName=\"p\">{`Continuous Deployment`}</inlineCode>{` with `}<inlineCode parentName=\"p\">{`Artiactory`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ArgoCD`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./ARTIFACTORY.md\"\n        }}>{`Artiact Storage with Artifactory`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./ARGOCD.md\"\n        }}>{`Continuous Deployment with ArgoCD`}</a></li>\n    </ul>\n    <p>{`You can use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ibm-garage-cloud/template-argocd-test\"\n      }}>{`Argo CD Template`}</a>{` to help define a deployment configuration for `}<inlineCode parentName=\"p\">{`test`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`staging`}</inlineCode>{` namespaces.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pageHeader, withTabs, text } from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, tabs = [] }) => (\n  <div className={cx(pageHeader, { [withTabs]: tabs.length })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const currentTabRegex = new RegExp(`${currentTab}(?!-)`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport BackToTopBtn from '../components/BackToTopBtn';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const { tabs, title, theme, description, keywords } = frontmatter;\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return slug.split('/').slice(-1)[0] || slugify(tabs[0], { lower: true });\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}\n    >\n      <PageHeader title={Title ? <Title /> : title} label=\"label\" tabs={tabs} />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <BackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"sourceRoot":""}