(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{417:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return r})),n.d(t,"default",(function(){return d}));n(11),n(5),n(6),n(4),n(10),n(1),n(0);var a=n(106),i=n(443);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var r={},s=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",t)}},l=s("AnchorLinks"),p=s("AnchorLink"),c={_frontmatter:r},b=i.a;function d(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["components"]);return Object(a.b)(b,o({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Continuous integration is a software development technique where software is built regularly by a team in an automated fashion.\nThis quote helps explain it:"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Continuous Integration is a software development practice where members of a team integrate their work frequently,\nusually each person integrates at least daily - leading to multiple integrations per day.\nEach integration is verified by an automated build (including test) to\ndetect integration errors as quickly as possible. Many teams find that this approach leads to significantly\nreduced integration problems and allows a team to develop cohesive software more rapidly"),Object(a.b)("cite",null,"– Martin Fowler")),Object(a.b)("h2",{id:"what-is-jenkins"},"What is Jenkins"),Object(a.b)("p",null,"Jenkins is a self-contained, open source automation server which can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software.\nIt is a perfect tool for helping managing continuous integration tasks for a wide range of software component’s."),Object(a.b)("p",null,"Jenkins Pipeline (or simply “Pipeline”) is a suite of plugins which supports implementing and integrating continuous delivery pipelines into Jenkins."),Object(a.b)("p",null,"A continuous delivery pipeline is an automated expression of your process for getting software from version control right through to your users and customers."),Object(a.b)("p",null,"Jenkins Pipeline provides an extensible set of tools for modeling simple-to-complex delivery pipelines “as code”. The definition of a Jenkins Pipeline is typically written into a text file (called a ",Object(a.b)("a",o({parentName:"p"},{href:"https://jenkins.io/doc/pipeline/tour/hello-world/"}),"Jenkinsfile"),") which in turn is checked into a project’s source control repository."),Object(a.b)("h3",{id:"pipelines"},"Pipelines"),Object(a.b)("p",null,"Pipelines offer a set of stages or steps that can be chained together to allow a level of software\nautomation. This automation can be tailored to the specific project requirements."),Object(a.b)("p",null,"You can read more information about Jenkins Pipelines ",Object(a.b)("a",o({parentName:"p"},{href:"https://jenkins.io/doc/book/pipeline/"}),"here")),Object(a.b)("h3",{id:"stages"},"Stages"),Object(a.b)("p",null,"Pipelines are defined in a ",Object(a.b)("inlineCode",{parentName:"p"},"Jenkinsfile")," that sits in the root of your application code. It defines a number of stages. Each of the ",Object(a.b)("inlineCode",{parentName:"p"},"Starter Kit Templates")," includes a ",Object(a.b)("inlineCode",{parentName:"p"},"Jenkinsfile")," that offers a number of stages. The stages have been configured to complete the build, test, package and deploy of the application code. Each stage can use the defined defined ",Object(a.b)("inlineCode",{parentName:"p"},"secrets")," and ",Object(a.b)("inlineCode",{parentName:"p"},"config maps")," that were previously configured during the installation of Development cluster setup."),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"Jenkinsfile")," is consistent between pipeline registration with OpenShift or IKS. The enable application compatibility between IKS and OpenShift, The ",Object(a.b)("inlineCode",{parentName:"p"},"Dockerfile")," has been optimized for []`Universal Base Image](",Object(a.b)("a",o({parentName:"p"},{href:"https://developers.redhat.com/products/rhel/ubi/"}),"https://developers.redhat.com/products/rhel/ubi/"),") images, this means the docker images when deployed can run on both OpenShift and IKS."),Object(a.b)("p",null,"The following gives a description of what each stage in the pipeline does. The ",Object(a.b)("em",{parentName:"p"},"Optional")," stages can be deleted or ignored if the tool support it is not installed. These stages represent a typical production pipeline flow for a Cloud Native application."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Setup")," clones the code into the pipeline"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Build")," runs the build commands for the code"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Test"),"\tvalidates the unit tests for the code"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Publish pacts"),"\t(",Object(a.b)("em",{parentName:"li"},"optional"),") publishes any pact contracts that have been defined"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Sonar scan")," (",Object(a.b)("em",{parentName:"li"},"optional"),") runs a sonar code scan of the source code and publishes the results to SonarQube"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Verify environment")," Validates the OpenShift or IKS environment configuration is valid"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Build image")," Builds the code into a Docker images and stores it in the IBM Cloud Image registry"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Deploy to DEV env"),"\tDeploys the Docker image tagged version to ",Object(a.b)("inlineCode",{parentName:"li"},"dev")," namespace using Helm Chart"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Health Check")," Validates the Health Endpoint of the deployed application"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Package Helm Chart")," (",Object(a.b)("em",{parentName:"li"},"optional"),") Stores the tagged version of the Helm chart into Artifactory"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Trigger CD Pipeline")," (",Object(a.b)("em",{parentName:"li"},"optional"),") This is a GitOps stage that will update the build number in designated git repo and trigger ArgoCD for deployment to ",Object(a.b)("strong",{parentName:"li"},"test"))),Object(a.b)("h2",{id:"registering-pipelines"},"Registering Pipelines"),Object(a.b)("p",null,"The ",Object(a.b)("a",o({parentName:"p"},{href:"/ibm-garage-developer-guide/starterkits/starterkittemplates/"}),"Starter Kit Templates")," are a good place to start to see how ",Object(a.b)("inlineCode",{parentName:"p"},"Jenkinsfile")," and ",Object(a.b)("inlineCode",{parentName:"p"},"Dockerfile")," should be configured for use in a Jenkins CI pipeline. To register you git repo use the ",Object(a.b)("a",o({parentName:"p"},{href:"/ibm-garage-developer-guide/getting-started/deploy-app"}),Object(a.b)("inlineCode",{parentName:"a"},"igc"))," command line. This command automates a number of manual steps you would have to do with Jenkins. Including managing secrets, webhooks, pipeline registration in the Jenkins tools."),Object(a.b)("p",null,"“bash\nigc pipeline"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{}),"\nBy default the pipeline will register into the `dev` namespace and will copy all the `configMaps` and `secrets` from the `tools` namespace to the `dev` namespace. This means the pipeline can execute knowing it has access to the key information allow it to integrate with both the Cloud Platform and the various development tools. See [Cluster Configuration](/guides/cluster-configuration) for more detailed information.pipeline\n\n### Registering Pipeline in new namespace\n\nYou can use any namespace you want to register a pipeline. if you add `-n` or `namespace` to your `igc pipeline` command it will create a new namespace if it doesnt exist and copy the necessary `secrets` and `configMaps`. In the future this will be managed by an operator.namespace\n\n```bash\nigc pipeline -n team-a\n")),Object(a.b)("p",null,"You will also need to change the namespace in your ",Object(a.b)("inlineCode",{parentName:"p"},"Jenkinsfile")," search for this and update it to the same name you used for your namespace. Edit the ",Object(a.b)("inlineCode",{parentName:"p"},"ENVIRONMENT_NAME")," value in your ",Object(a.b)("inlineCode",{parentName:"p"},"Jenkinsfile")," to match the namespace you targeted for you CI deployment."),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-bash"}),"env:\n    - name: CHART_NAME\n      value: template-node-typescript\n    - name: CHART_ROOT\n      value: chart\n    - name: TMP_DIR\n      value: .tmp\n    - name: HOME\n      value: /home/devops\n    - name: ENVIRONMENT_NAME\n      value: team-a\n    - name: BUILD_NUMBER\n      value: ${env.BUILD_NUMBER}\n\n")),Object(a.b)("p",null,"This is good if you have various quads or pairs working in the same Development cluster."),Object(a.b)("p",null,"Once you become familiar with deploying code into OpenShift or IKS, read up about how you can manage code deployment with ",Object(a.b)("inlineCode",{parentName:"p"},"Continuous Deployment")," with ",Object(a.b)("inlineCode",{parentName:"p"},"Artiactory")," and ",Object(a.b)("inlineCode",{parentName:"p"},"ArgoCD")),Object(a.b)(l,{small:!0,mdxType:"AnchorLinks"},Object(a.b)(p,{to:"/guides/artifact-management",mdxType:"AnchorLink"},"Artiact Storage with Artifactory"),Object(a.b)(p,{to:"/guides/continuous-deployment",mdxType:"AnchorLink"},"Continuous Deployment with ArgoCD")),Object(a.b)("p",null,"You can use the ",Object(a.b)("a",o({parentName:"p"},{href:"/ibm-garage-developer-guide/starterkits/argocd"}),"Argo CD Template")," to help define a deployment configuration for ",Object(a.b)("inlineCode",{parentName:"p"},"test")," and ",Object(a.b)("inlineCode",{parentName:"p"},"staging")," namespaces."))}d.isMDXComponent=!0},441:function(e){e.exports=JSON.parse('{"data":{"site":{"pathPrefix":"/ibm-garage-developer-guide"}}}')},442:function(e){e.exports=JSON.parse('{"data":{"site":{"siteMetadata":{"repository":{"baseUrl":"","subDirectory":"","branch":"master"}}}}}')},443:function(e,t,n){"use strict";n(32),n(28);var a=n(1),i=n(441),o=n(0),r=n.n(o),s=n(105),l=n.n(s),p=n(195),c=n(127),b=n(3),d=n.n(b),u=n(384),m=function(e){var t,n=e.title,i=e.tabs,o=void 0===i?[]:i;return Object(a.b)("div",{className:d()(u.pageHeader,(t={},t[u.withTabs]=o.length,t))},Object(a.b)("div",{className:"bx--grid"},Object(a.b)("div",{className:"bx--row"},Object(a.b)("div",{className:"bx--col-lg-12"},Object(a.b)("h1",{id:"page-title",className:u.text},n)))))},h=n(442),g=n(385),f=function(e){var t=e.relativePagePath,n=e.repository,i=h.data.site.siteMetadata.repository,o=n||i,r=o.baseUrl,s=o.subDirectory,l=r+"/edit/"+o.branch+s+"/src/pages"+t;return r?Object(a.b)("div",{className:"bx--row "+g.row},Object(a.b)("div",{className:"bx--col"},Object(a.b)("a",{className:g.link,href:l},"Edit this page on GitHub"))):null},O=n(193),j=(n(59),n(26)),y=n(386);var v=function(e){var t,n;function i(){return e.apply(this,arguments)||this}return n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,i.prototype.render=function(){var e=this.props,t=e.tabs,n=e.slug,i=n.split("/").filter(Boolean).slice(-1)[0],o=t.map((function(e){var t,o=l()(e,{lower:!0}),r=o===i,s=new RegExp(i+"(?!-)"),p=n.replace(s,o);return Object(a.b)("li",{key:e,className:d()((t={},t[y.selectedItem]=r,t),y.listItem)},Object(a.b)(j.Link,{className:y.link,to:""+p},e))}));return Object(a.b)("div",{className:y.tabsContainer},Object(a.b)("div",{className:"bx--grid"},Object(a.b)("div",{className:"bx--row"},Object(a.b)("div",{className:"bx--col-lg-12 bx--col-no-gutter"},Object(a.b)("nav",null,Object(a.b)("ul",{className:y.list},o))))))},i}(r.a.Component),N=n(194);t.a=function(e){var t=e.pageContext,n=e.children,o=e.location,r=e.Title,s=t.frontmatter,b=void 0===s?{}:s,d=t.relativePagePath,u=t.titleType,h=b.tabs,g=b.title,j=b.theme,y=b.description,w=b.keywords,k=i.data.site.pathPrefix,C=k?o.pathname.replace(k,""):o.pathname,T=h?C.split("/").slice(-1)[0]||l()(h[0],{lower:!0}):"";return Object(a.b)(c.a,{homepage:!1,theme:j,pageTitle:g,pageDescription:y,pageKeywords:w,titleType:u},Object(a.b)(m,{title:r?Object(a.b)(r,null):g,label:"label",tabs:h}),h&&Object(a.b)(v,{slug:C,tabs:h,currentTab:T}),Object(a.b)(N.a,{padded:!0},n,Object(a.b)(f,{relativePagePath:d})),Object(a.b)(O.a,{pageContext:t,location:o,slug:C,tabs:h,currentTab:T}),Object(a.b)(p.a,null))}}}]);
//# sourceMappingURL=component---src-pages-guides-continuous-integration-index-mdx-20198cb425b5b22610c3.js.map