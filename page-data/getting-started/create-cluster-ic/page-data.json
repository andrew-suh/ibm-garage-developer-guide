{"componentChunkName":"component---src-pages-getting-started-create-cluster-ic-index-mdx","path":"/getting-started/create-cluster-ic/","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"Create cluster in IBM Cloud"},"relativePagePath":"/getting-started/create-cluster-ic/index.mdx","titleType":"page","MdxNode":{"id":"1f69fa9e-177d-5ba0-9eea-079faa54ea69","children":[],"parent":"9b9c2c56-1185-54f6-99e8-45872bbcf834","internal":{"content":"---\ntitle: Create cluster in IBM Cloud\n---\n\n<Tabs>\n\n<Tab label=\"Pre-requisites\">\n\n<PageDescription>\n\nPrepare to run the scripts that create a cluster\n\n</PageDescription>\n\nThe IBM Garage for Cloud Developer Tools facilitate development and deployment of cloud-native applications. \nThey can be hosted in any Kubernetes or OpenShift cluster.\nIn IBM Cloud, the cluster is hosted by either the [IBM Cloud Kubernetes Service](https://cloud.ibm.com/docs/containers) or \n[Red Hat OpenShift on IBM Cloud](https://cloud.ibm.com/docs/openshift). \nThese instructions explain how to access, configure, and run the scripts to create the cluster.\n\nAfter creating the cluster, follow the [Install Tools](install-tools) instructions \nto install the Developer Tools into the cluster created here.\n\nThe following pre-requisties are required before following these setup instructions.\n\n- An IBM Cloud account with:\n    - the ability to provision resources to support [Kubernetes](https://cloud.ibm.com/kubernetes/clusters) \n    and [OpenShift](https://cloud.ibm.com/kubernetes/clusters?platformType=openshift) environments\n    - the ability to create a [Resource Group](https://cloud.ibm.com/account/resource-groups) for your development resources \n    and admin rights to this resource group\n    - a region and zone containing [a pair of public and private VLANs](https://cloud.ibm.com/classic/network/vlans)\n- [Docker Desktop](https://www.docker.com/products/docker-desktop) installed and running on your local machine\n- [Node](https://nodejs.org/en/) installed on your local machine\n\n</Tab>\n<Tab label=\"1. Download\">\n\n<PageDescription>\n\nObtain the scripts that create a cluster\n\n</PageDescription>\n\nClone the [ibm-garage-iteration-zero](https://github.com/ibm-garage-cloud/ibm-garage-iteration-zero) Git repository to your local filesystem\n\n```bash\ngit clone git@github.com:ibm-garage-cloud/ibm-garage-iteration-zero.git\n```\n\nSwitch to the cloned directory\n\n```bash\ncd ibm-garage-iteration-zero\n```\n</Tab>\n\n<Tab label=\"2. API keys\">\n\n<PageDescription>\n\nConfigure the keys the CLI uses to authenticate\n\n</PageDescription>\n\nIn IBM Cloud, a Kubernetes or OpenShift clutser is a PaaS resource hosted in IaaS resources. \nAPI keys authenticate an [IBM Cloud CLI](https://cloud.ibm.com/docs/cli \"IBM Cloud CLI and Developer Tools\") \nclient--such as a Terraform script--to create these resources programatically. Two keys will be needed:\n- The first key authorizes creating Classic Infrastructure (IaaS) resources\n- The second key authorizes creating IBM Cloud (PaaS) resources\n\nThe following steps find or create the required keys and put them into a file called `credentials.properties`.\n\n```bash\nclassic.username=<CLASSIC_USERNAME>\nclassic.api.key=<CLASSIC_API_KEY>\nibmcloud.api.key=<IBMCLOUD_API_KEY>\n```\n\nThe installation scripts will use these properties to authenticate to IBM Cloud.\n\n### Step A. Create the credentials.properties file\n\n- Inside the `iteration-zero-ibmcloud` folder, copy `credentials.template` to a file named `credentials.properties`.\n\n```bash\ncd iteration-zero-ibmcloud\ncp credentials.template credentials.properties\n```\n\nThe `credentials.properties` file is already listed in the `.gitignore` file so that the file containing \nyour private API keys will not be pushed to the server repository.\n\n### Step B. Set the Classic infrastructure API key\n\n- Follow these instructions to [create a Classic infrastructure API key](https://cloud.ibm.com/docs/iam?topic=iam-classic_keys \"Managing classic infrastructure API keys\"):\n\n    - In the IBM Cloud console, go to the IBM Cloud API Keys page\n\n    To open the IBM Cloud API Keys page, select **Manage -> Access (IAM)**, then select the **IBM Cloud API keys** tab.\n\n    - If your account already has a classic infrastructure API key, it will appear in the list of keys as **Classic infrastructure API key**. Otherwise, the page will have a **Create a classic infrastructure API key** button on the top. To crate the key, press that button and close the dialog.\n\n    ![API Keys](apikeys.png)\n\n    - Find **Classic infrastructure API key** in the list and open its details.\n\n    ![Classic Keys](classickeys.png)\n\n- Edit the `credentials.properties` file to set the values for the `classic.username` and `classic.api.key` properties.\n\n### Step C. Set the IBM Cloud API key\n\n- Follow these instructions to create an IBM Cloud API key:\n\n    - [Managing user API keys](https://cloud.ibm.com/docs/iam?topic=iam-userapikey \"Managing user API keys\")\n\n- Edit the `credentials.properties` file to set the value for the `ibmcloud.api.key` property.\n\n</Tab>\n\n<Tab label=\"3. TF Variables\">\n\n<PageDescription>\n\nConfigure the properties describing the cluster environment\n\n</PageDescription>\n\nThe settings for creating the Developer Tools cluster go in a properties file called `terraform.tfvars`. \n\nThe file you will edit is `./terraform/settings/terraform.tfvars`. The next few steps will find the necessary \nresources and set them in the `terraform.tfvars` file. Along the way, if any of these resources don't already exist, \nyou'll need to create them.\n\nThe file consists of two parts: required varialbes and optional variables. There is a tool for optionally generating\nthe required variables. The optional variables have default values that you can change.\n\n### Required variables\n\nSeveral of the variables are required and have no reasonable defaults, therefore you will need to set them.\n\nTypical values look like this:\n\n```bash\nresource_group_name=\"catalyst-team\"\nvlan_region=\"us-south\"\nvlan_datacenter=\"dal10\"\npublic_vlan_id=\"2366011\"\nprivate_vlan_id=\"2366012\"\ncluster_name=\"catalyst-team-cluster\"\n```\n\n### Optional: Generate the properties\n\nThis tool is for users who don't know what these required settings should be and want a simple way \nto gather reasonable defaults for their particular account.\n\nThe [Developer Tools CLI](cli) has a command to gather this information for you, \nin a format that is easy to cut/paste into the `terraform.tfvars` properties file. \n\n```bash\nigc vlan\n```\n\nNote that you need to log into your account using the IBM Cloud CLI to use this tool.\n\n### Optional variables\n\nThe remaining properties are also required but have reasonable defaults, so setting them is optional.\n\nThe values look like this:\n\n```bash\n# The type of cluster that will be created/used (kubernetes or openshift)\ncluster_type=\"kubernetes\"\n# Flag indicating if we are using an existing cluster or creating a new one\ncluster_exists=\"false\"\n# Flag indicating if we are using an existing PostgreSQL server or creating a new one\npostgres_server_exists=\"false\"\n```\n\n### Scenarios\n\nThese are scenarios for using these optioal settings:\n- To specify whether the cluster (new or existing) is Kubernetes or OpenShift, set `cluster_type`.\n\n- To specify installing the tools into an existing cluster, set `cluster_exists`, `cluster_type`, and  `cluster_name`.\n\n- To specify that the existing cluster already has a PostgreSQL service instance, set `postgres_server_exists`.\n\n</Tab>\n\n<Tab label=\"3a. Resource Group\">\n\n<PageDescription>\n\nConfigure the property specifying the resource group\n\n</PageDescription>\n\nThe Developer Tools environment consists of several IBM Cloud resources--a Kubernetes or OpenShift cluster, \nsome cloud service instances, etc. \n[IBM Cloud Identity and Access Management](https://cloud.ibm.com/docs/iam \"Managing identity and access\") \nmanages access to resources by organizing them into resource groups, so that one access policy can easily be applied \nto all of the resources in a group. \n\nIn `terraform.tfvars`, set the `resource_group_name` property to specify the resource group for the environment's resources. \nThis resource group enables all of the resources to work together \nand will help distinguish the Developer Tools resources from the other resources in the same IBM Cloud account. \nThe resource group can be a new one--see the instructions below. Or you can specify an existing resource group.\n\n- Follow these instructions to create a resource group:\n\n    - [Creating a resource group](https://cloud.ibm.com/docs/resources?topic=resources-rgs#create_rgs \"Creating and managing resource groups\")\n\n</Tab>\n\n<Tab label=\"3b. VLANs\">\n\n<PageDescription>\n\nConfigure the properties specifying the region, zone, and VLANs\n\n</PageDescription>\n\nThe Developer Tools environment will be installed in either a Kubernetes or OpenShift cluster. \nIn IBM Cloud, a single zone cluster is \n[hosted in a particular zone in a particular region](https://cloud.ibm.com/docs/overview?topic=overview-zero-downtime#ov_intro_reg \"Locations for resource deployment\"). \nIf the account you're using has multiple regions and zones, \nyou need to decide what region and zone you'll want the cluster cerated in and specify those. \n\nIn `terraform.tfvars`, set the following properties:\n- `vlan_region` -- The region that the cluster is or will be in\n- `vlan_datacenter` -- The zone in that region that the cluster is or will be in\n\nThe [networking in a Kubernetes or OpenShift cluster](https://cloud.ibm.com/docs/containers?topic=containers-plan_clusters#plan_basics \"Understanding network basics of classic clusters\") \nconsists of (at a minimum) two VLANs, a public VLAN and a private VLAN. \nSpecify a pair of VLANs in the desired region and zone.\n\nIn `terraform.tfvars`, set the following properties:\n- `public_vlan_id` -- The public VLAN that the cluster is or will be using\n- `private_vlan_id` -- The private VLAN that the cluster is or will be using\n\nAn earlier step talked about using the `igc vlan` command in the [Developer Tools CLI](cli)\nto gather these VLAN settings. \n\nAdvanced users who want to specifiy more specific settings can determine the VLAN info: \n[Getting started with VLANs](https://cloud.ibm.com/docs/infrastructure/vlans \"VLANs\") explains how to open the\nVLAN List page in the console. Choose the public and private VLANs for the region and zone you want to\nhost the Developer Tools environment. If suitable VLANs don't already exist, you can create them here.\n\n</Tab>\n\n<Tab label=\"4. Run\">\n\n<PageDescription>\n\nRun the scripts that create the cluster\n\n</PageDescription>\n\nHaving configured the `credentials.properties` and `terraform.tfvars` files, we are now ready to kick off the installation.\n\n- Launch a [IBM Garage for Developer Tools Docker container](https://github.com/ibm-garage-cloud/ibm-garage-cli-tools \"Cloud Garage Tools Docker image\").\n\n    Run the following command to run the Docker container:\n\n    ```bash\n    ./launch.sh\n    ```\n\n    This will install the Cloud Garage Tools Docker image and exec shell into the running container. The container will \n    mount the filesystem's `./terraform/` directory as `/home/devops/src/`. Once the Docker container has started and \n    the script has exec shelled into it, you will see an IBM Garage banner. This will help you identify you are running \n    inside the Docker image that has just mounted your file system.\n\n    ```bash\n    % ./launch.sh\n    Cleaning up old container: ibm-garage-cli-tools-abcde\n    Initializing container ibm-garage-cli-tools-abcde from garagecatalyst/ibm-garage-cli-tools:0.0.24\n    d14e378eac5f8080dbaf5466d680396fc36f9fcf9433247409ea9b3a62326ad2\n    Attaching to running container...\n        ________  __  ___   ________                __   ______\n       /  _/ __ )/  |/  /  / ____/ /___  __  ______/ /  / ____/___ __________ _____ ____\n       / // __  / /|_/ /  / /   / / __ \\/ / / / __  /  / / __/ __ `/ ___/ __ `/ __ `/ _ \\\n     _/ // /_/ / /  / /  / /___/ / /_/ / /_/ / /_/ /  / /_/ / /_/ / /  / /_/ / /_/ /  __/\n    /___/_____/_/  /_/   \\____/_/\\____/\\__,_/\\__,_/   \\____/\\__,_/_/   \\__,_/\\__, /\\___/\n                                                                            /____/\n    Run 'image-help' to get a list of available tools, scripts, and ENV properties\n    ```\n\n    The `image-help` command shows what can be done in this conatiner:\n\n    ```bash\n    $ image-help\n    Available env properties (can be overridden for individual commands):\n    > BM_API_KEY - the IBM Cloud api key\n    > REGION - the IBM Cloud region (e.g. us-south)\n    > RESOURCE_GROUP - the IBM Cloud resource group\n    > CLUSTER_NAME - the name of the kubernetes cluster in IBM Cloud\n    > SL_USERNAME - the Classic Infrastructure user name or API user name (e.g. 282165_joe@us.ibm.com)\n    > SL_API_KEY - the Classic Infrastructure api key\n\n    Available tools:\n    > terraform (with helm, kube, and ibm provider plugins)\n    > calicoctl\n    > ibmcloud (with container-service, container-registry, and cloud-databases plugins)\n    > kubectl\n    > kustomize\n    > oc\n    > helm\n    > docker\n    > git\n    > nvm\n    > node (v11.12.0 currently installed)\n    > yo\n\n    Available scripts:\n    > init.sh {BM_API_KEY} {REGION} {RESOURCE_GROUP} {CLUSTER_NAME}\n    > createNamespaces.sh\n    > deleteNamespace.sh\n    > installHelm.sh\n    > cluster-pull-secret-apply.sh\n    > setup-namespace-pull-secrets.sh\n    > checkPodRunning.sh\n    > copy-secret-to-namespace.sh\n    ```\n\n- Create the Developer Tools cluster\n\n    The supplied Terraform script is ready to run using the settings in `terraform.tfvars`. \n    You optionally can extend or modify the scripts and tailor them for your project's specific needs.\n\n    Run this script in the container:\n\n    ```bash\n    ./runTerraform.sh\n    ```\n\n    This script will create the Developer Tools cluster.\n\n    The script will verify some basic settings and prompt if you want to proceed. After you select **Y** (for yes), \n    the Terraform Apply process will begin to create the infrastructure and services for your environment.\n\n    Creating a new cluster takes about 1.5 hours on average (but can also take considerably longer). \n    At the end, you should have your Developer Tools cluster. Enjoy!\n\n### Possible issues\n\nIf you find that that the Terraform provisioning has failed, try re-running the `runTerraform.sh` script again. \nThe state will be saved and Terraform will try and apply the configuration to match the desired end state.\n\n</Tab>\n</Tabs>\n","type":"Mdx","contentDigest":"1b5e6bd2961b4fef940ce08e531f39a8","counter":239,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Create cluster in IBM Cloud"},"exports":{},"rawBody":"---\ntitle: Create cluster in IBM Cloud\n---\n\n<Tabs>\n\n<Tab label=\"Pre-requisites\">\n\n<PageDescription>\n\nPrepare to run the scripts that create a cluster\n\n</PageDescription>\n\nThe IBM Garage for Cloud Developer Tools facilitate development and deployment of cloud-native applications. \nThey can be hosted in any Kubernetes or OpenShift cluster.\nIn IBM Cloud, the cluster is hosted by either the [IBM Cloud Kubernetes Service](https://cloud.ibm.com/docs/containers) or \n[Red Hat OpenShift on IBM Cloud](https://cloud.ibm.com/docs/openshift). \nThese instructions explain how to access, configure, and run the scripts to create the cluster.\n\nAfter creating the cluster, follow the [Install Tools](install-tools) instructions \nto install the Developer Tools into the cluster created here.\n\nThe following pre-requisties are required before following these setup instructions.\n\n- An IBM Cloud account with:\n    - the ability to provision resources to support [Kubernetes](https://cloud.ibm.com/kubernetes/clusters) \n    and [OpenShift](https://cloud.ibm.com/kubernetes/clusters?platformType=openshift) environments\n    - the ability to create a [Resource Group](https://cloud.ibm.com/account/resource-groups) for your development resources \n    and admin rights to this resource group\n    - a region and zone containing [a pair of public and private VLANs](https://cloud.ibm.com/classic/network/vlans)\n- [Docker Desktop](https://www.docker.com/products/docker-desktop) installed and running on your local machine\n- [Node](https://nodejs.org/en/) installed on your local machine\n\n</Tab>\n<Tab label=\"1. Download\">\n\n<PageDescription>\n\nObtain the scripts that create a cluster\n\n</PageDescription>\n\nClone the [ibm-garage-iteration-zero](https://github.com/ibm-garage-cloud/ibm-garage-iteration-zero) Git repository to your local filesystem\n\n```bash\ngit clone git@github.com:ibm-garage-cloud/ibm-garage-iteration-zero.git\n```\n\nSwitch to the cloned directory\n\n```bash\ncd ibm-garage-iteration-zero\n```\n</Tab>\n\n<Tab label=\"2. API keys\">\n\n<PageDescription>\n\nConfigure the keys the CLI uses to authenticate\n\n</PageDescription>\n\nIn IBM Cloud, a Kubernetes or OpenShift clutser is a PaaS resource hosted in IaaS resources. \nAPI keys authenticate an [IBM Cloud CLI](https://cloud.ibm.com/docs/cli \"IBM Cloud CLI and Developer Tools\") \nclient--such as a Terraform script--to create these resources programatically. Two keys will be needed:\n- The first key authorizes creating Classic Infrastructure (IaaS) resources\n- The second key authorizes creating IBM Cloud (PaaS) resources\n\nThe following steps find or create the required keys and put them into a file called `credentials.properties`.\n\n```bash\nclassic.username=<CLASSIC_USERNAME>\nclassic.api.key=<CLASSIC_API_KEY>\nibmcloud.api.key=<IBMCLOUD_API_KEY>\n```\n\nThe installation scripts will use these properties to authenticate to IBM Cloud.\n\n### Step A. Create the credentials.properties file\n\n- Inside the `iteration-zero-ibmcloud` folder, copy `credentials.template` to a file named `credentials.properties`.\n\n```bash\ncd iteration-zero-ibmcloud\ncp credentials.template credentials.properties\n```\n\nThe `credentials.properties` file is already listed in the `.gitignore` file so that the file containing \nyour private API keys will not be pushed to the server repository.\n\n### Step B. Set the Classic infrastructure API key\n\n- Follow these instructions to [create a Classic infrastructure API key](https://cloud.ibm.com/docs/iam?topic=iam-classic_keys \"Managing classic infrastructure API keys\"):\n\n    - In the IBM Cloud console, go to the IBM Cloud API Keys page\n\n    To open the IBM Cloud API Keys page, select **Manage -> Access (IAM)**, then select the **IBM Cloud API keys** tab.\n\n    - If your account already has a classic infrastructure API key, it will appear in the list of keys as **Classic infrastructure API key**. Otherwise, the page will have a **Create a classic infrastructure API key** button on the top. To crate the key, press that button and close the dialog.\n\n    ![API Keys](apikeys.png)\n\n    - Find **Classic infrastructure API key** in the list and open its details.\n\n    ![Classic Keys](classickeys.png)\n\n- Edit the `credentials.properties` file to set the values for the `classic.username` and `classic.api.key` properties.\n\n### Step C. Set the IBM Cloud API key\n\n- Follow these instructions to create an IBM Cloud API key:\n\n    - [Managing user API keys](https://cloud.ibm.com/docs/iam?topic=iam-userapikey \"Managing user API keys\")\n\n- Edit the `credentials.properties` file to set the value for the `ibmcloud.api.key` property.\n\n</Tab>\n\n<Tab label=\"3. TF Variables\">\n\n<PageDescription>\n\nConfigure the properties describing the cluster environment\n\n</PageDescription>\n\nThe settings for creating the Developer Tools cluster go in a properties file called `terraform.tfvars`. \n\nThe file you will edit is `./terraform/settings/terraform.tfvars`. The next few steps will find the necessary \nresources and set them in the `terraform.tfvars` file. Along the way, if any of these resources don't already exist, \nyou'll need to create them.\n\nThe file consists of two parts: required varialbes and optional variables. There is a tool for optionally generating\nthe required variables. The optional variables have default values that you can change.\n\n### Required variables\n\nSeveral of the variables are required and have no reasonable defaults, therefore you will need to set them.\n\nTypical values look like this:\n\n```bash\nresource_group_name=\"catalyst-team\"\nvlan_region=\"us-south\"\nvlan_datacenter=\"dal10\"\npublic_vlan_id=\"2366011\"\nprivate_vlan_id=\"2366012\"\ncluster_name=\"catalyst-team-cluster\"\n```\n\n### Optional: Generate the properties\n\nThis tool is for users who don't know what these required settings should be and want a simple way \nto gather reasonable defaults for their particular account.\n\nThe [Developer Tools CLI](cli) has a command to gather this information for you, \nin a format that is easy to cut/paste into the `terraform.tfvars` properties file. \n\n```bash\nigc vlan\n```\n\nNote that you need to log into your account using the IBM Cloud CLI to use this tool.\n\n### Optional variables\n\nThe remaining properties are also required but have reasonable defaults, so setting them is optional.\n\nThe values look like this:\n\n```bash\n# The type of cluster that will be created/used (kubernetes or openshift)\ncluster_type=\"kubernetes\"\n# Flag indicating if we are using an existing cluster or creating a new one\ncluster_exists=\"false\"\n# Flag indicating if we are using an existing PostgreSQL server or creating a new one\npostgres_server_exists=\"false\"\n```\n\n### Scenarios\n\nThese are scenarios for using these optioal settings:\n- To specify whether the cluster (new or existing) is Kubernetes or OpenShift, set `cluster_type`.\n\n- To specify installing the tools into an existing cluster, set `cluster_exists`, `cluster_type`, and  `cluster_name`.\n\n- To specify that the existing cluster already has a PostgreSQL service instance, set `postgres_server_exists`.\n\n</Tab>\n\n<Tab label=\"3a. Resource Group\">\n\n<PageDescription>\n\nConfigure the property specifying the resource group\n\n</PageDescription>\n\nThe Developer Tools environment consists of several IBM Cloud resources--a Kubernetes or OpenShift cluster, \nsome cloud service instances, etc. \n[IBM Cloud Identity and Access Management](https://cloud.ibm.com/docs/iam \"Managing identity and access\") \nmanages access to resources by organizing them into resource groups, so that one access policy can easily be applied \nto all of the resources in a group. \n\nIn `terraform.tfvars`, set the `resource_group_name` property to specify the resource group for the environment's resources. \nThis resource group enables all of the resources to work together \nand will help distinguish the Developer Tools resources from the other resources in the same IBM Cloud account. \nThe resource group can be a new one--see the instructions below. Or you can specify an existing resource group.\n\n- Follow these instructions to create a resource group:\n\n    - [Creating a resource group](https://cloud.ibm.com/docs/resources?topic=resources-rgs#create_rgs \"Creating and managing resource groups\")\n\n</Tab>\n\n<Tab label=\"3b. VLANs\">\n\n<PageDescription>\n\nConfigure the properties specifying the region, zone, and VLANs\n\n</PageDescription>\n\nThe Developer Tools environment will be installed in either a Kubernetes or OpenShift cluster. \nIn IBM Cloud, a single zone cluster is \n[hosted in a particular zone in a particular region](https://cloud.ibm.com/docs/overview?topic=overview-zero-downtime#ov_intro_reg \"Locations for resource deployment\"). \nIf the account you're using has multiple regions and zones, \nyou need to decide what region and zone you'll want the cluster cerated in and specify those. \n\nIn `terraform.tfvars`, set the following properties:\n- `vlan_region` -- The region that the cluster is or will be in\n- `vlan_datacenter` -- The zone in that region that the cluster is or will be in\n\nThe [networking in a Kubernetes or OpenShift cluster](https://cloud.ibm.com/docs/containers?topic=containers-plan_clusters#plan_basics \"Understanding network basics of classic clusters\") \nconsists of (at a minimum) two VLANs, a public VLAN and a private VLAN. \nSpecify a pair of VLANs in the desired region and zone.\n\nIn `terraform.tfvars`, set the following properties:\n- `public_vlan_id` -- The public VLAN that the cluster is or will be using\n- `private_vlan_id` -- The private VLAN that the cluster is or will be using\n\nAn earlier step talked about using the `igc vlan` command in the [Developer Tools CLI](cli)\nto gather these VLAN settings. \n\nAdvanced users who want to specifiy more specific settings can determine the VLAN info: \n[Getting started with VLANs](https://cloud.ibm.com/docs/infrastructure/vlans \"VLANs\") explains how to open the\nVLAN List page in the console. Choose the public and private VLANs for the region and zone you want to\nhost the Developer Tools environment. If suitable VLANs don't already exist, you can create them here.\n\n</Tab>\n\n<Tab label=\"4. Run\">\n\n<PageDescription>\n\nRun the scripts that create the cluster\n\n</PageDescription>\n\nHaving configured the `credentials.properties` and `terraform.tfvars` files, we are now ready to kick off the installation.\n\n- Launch a [IBM Garage for Developer Tools Docker container](https://github.com/ibm-garage-cloud/ibm-garage-cli-tools \"Cloud Garage Tools Docker image\").\n\n    Run the following command to run the Docker container:\n\n    ```bash\n    ./launch.sh\n    ```\n\n    This will install the Cloud Garage Tools Docker image and exec shell into the running container. The container will \n    mount the filesystem's `./terraform/` directory as `/home/devops/src/`. Once the Docker container has started and \n    the script has exec shelled into it, you will see an IBM Garage banner. This will help you identify you are running \n    inside the Docker image that has just mounted your file system.\n\n    ```bash\n    % ./launch.sh\n    Cleaning up old container: ibm-garage-cli-tools-abcde\n    Initializing container ibm-garage-cli-tools-abcde from garagecatalyst/ibm-garage-cli-tools:0.0.24\n    d14e378eac5f8080dbaf5466d680396fc36f9fcf9433247409ea9b3a62326ad2\n    Attaching to running container...\n        ________  __  ___   ________                __   ______\n       /  _/ __ )/  |/  /  / ____/ /___  __  ______/ /  / ____/___ __________ _____ ____\n       / // __  / /|_/ /  / /   / / __ \\/ / / / __  /  / / __/ __ `/ ___/ __ `/ __ `/ _ \\\n     _/ // /_/ / /  / /  / /___/ / /_/ / /_/ / /_/ /  / /_/ / /_/ / /  / /_/ / /_/ /  __/\n    /___/_____/_/  /_/   \\____/_/\\____/\\__,_/\\__,_/   \\____/\\__,_/_/   \\__,_/\\__, /\\___/\n                                                                            /____/\n    Run 'image-help' to get a list of available tools, scripts, and ENV properties\n    ```\n\n    The `image-help` command shows what can be done in this conatiner:\n\n    ```bash\n    $ image-help\n    Available env properties (can be overridden for individual commands):\n    > BM_API_KEY - the IBM Cloud api key\n    > REGION - the IBM Cloud region (e.g. us-south)\n    > RESOURCE_GROUP - the IBM Cloud resource group\n    > CLUSTER_NAME - the name of the kubernetes cluster in IBM Cloud\n    > SL_USERNAME - the Classic Infrastructure user name or API user name (e.g. 282165_joe@us.ibm.com)\n    > SL_API_KEY - the Classic Infrastructure api key\n\n    Available tools:\n    > terraform (with helm, kube, and ibm provider plugins)\n    > calicoctl\n    > ibmcloud (with container-service, container-registry, and cloud-databases plugins)\n    > kubectl\n    > kustomize\n    > oc\n    > helm\n    > docker\n    > git\n    > nvm\n    > node (v11.12.0 currently installed)\n    > yo\n\n    Available scripts:\n    > init.sh {BM_API_KEY} {REGION} {RESOURCE_GROUP} {CLUSTER_NAME}\n    > createNamespaces.sh\n    > deleteNamespace.sh\n    > installHelm.sh\n    > cluster-pull-secret-apply.sh\n    > setup-namespace-pull-secrets.sh\n    > checkPodRunning.sh\n    > copy-secret-to-namespace.sh\n    ```\n\n- Create the Developer Tools cluster\n\n    The supplied Terraform script is ready to run using the settings in `terraform.tfvars`. \n    You optionally can extend or modify the scripts and tailor them for your project's specific needs.\n\n    Run this script in the container:\n\n    ```bash\n    ./runTerraform.sh\n    ```\n\n    This script will create the Developer Tools cluster.\n\n    The script will verify some basic settings and prompt if you want to proceed. After you select **Y** (for yes), \n    the Terraform Apply process will begin to create the infrastructure and services for your environment.\n\n    Creating a new cluster takes about 1.5 hours on average (but can also take considerably longer). \n    At the end, you should have your Developer Tools cluster. Enjoy!\n\n### Possible issues\n\nIf you find that that the Terraform provisioning has failed, try re-running the `runTerraform.sh` script again. \nThe state will be saved and Terraform will try and apply the configuration to match the desired end state.\n\n</Tab>\n</Tabs>\n","fileAbsolutePath":"/Users/mjperrins/projects/cat/guide/src/pages/getting-started/create-cluster-ic/index.mdx"}}}}