{"componentChunkName":"component---src-pages-getting-started-installation-existing-index-mdx","path":"/getting-started/installation-existing/","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"Existing IBM Cloud cluster"},"relativePagePath":"/getting-started/installation-existing/index.mdx","titleType":"page","MdxNode":{"id":"e9e002e8-646d-5434-855f-0fb106e00fe2","children":[],"parent":"6da6a0a6-662a-58c9-919a-757022a995e3","internal":{"content":"---\ntitle: Existing IBM Cloud cluster\n---\n\n<Tabs>\n\n<Tab label=\"Pre-requisites\">\n\n<PageDescription>\n\nPrepare to run Terraform to install the Development Tools into an existing IBM Cloud managed cluster\n</PageDescription>\n\nThe IBM Garage for Cloud Developer Tools facilitate development and deployment of cloud-native applications. \nThey can be hosted in any Kubernetes or OpenShift cluster managed by IBM Cloud.\n\nYou must have created a IBM Cloud managed cluster using either the [IBM Cloud Kubernetes Service](https://cloud.ibm.com/docs/containers) or\n[Red Hat OpenShift on IBM Cloud](https://cloud.ibm.com/docs/openshift). \n\nThese instructions assume that the cluster has already been created and explain \nhow to configure and run the Terraform Infrastructure as Code to install the Developer Tools into that existing cluster.\n\nThe following pre-requisites are required before following the setup instructions:\n\n- An IBM Cloud account with the ability to provision cloud service instances in the same region and zone as the existing cluster\n- [Docker Desktop](https://www.docker.com/products/docker-desktop) installed and running on your local machine\n- [Node](https://nodejs.org/en/) installed on your local machine\n\n</Tab>\n\n<Tab label=\"Download\">\n\n<PageDescription>\n\nObtain the Terraform Infrastructure as Code that will install the tools into your IBM Cloud Managed Cluster\n\n</PageDescription>\n\n- Clone the [ibm-garage-iteration-zero](https://github.com/ibm-garage-cloud/ibm-garage-iteration-zero) Git repository to your local filesystem\n    ```bash\n    git clone git@github.com:ibm-garage-cloud/ibm-garage-iteration-zero.git\n    ```\n\n- Switch to the cloned directory\n    ```bash\n    cd ibm-garage-iteration-zero\n    ```\n\n</Tab>\n\n<Tab label=\"API key\">\n\n<PageDescription>\n\nConfigure the key the CLI uses to create cloud services\n\n</PageDescription>\n\n- The installation scripts need an API key to authenticate to IBM Cloud.\nThe following steps create the required API key and put them into a properties file.\n\n- The `credentials.properties` property file:\n    ```bash\n    classic.username=<CLASSIC_USERNAME>\n    classic.api.key=<CLASSIC_API_KEY>\n    ibmcloud.api.key=<IBMCLOUD_API_KEY>\n    ```\n\n- Since the cluster already exists, we'll only need to set the `ibmcloud.api.key` property.\n\n### Step A. Create the credentials.properties file\n\n- Inside the `iteration-zero-ibmcloud` folder, copy `credentials.template` to a file named `credentials.properties`.\n    ```bash\n    cd iteration-zero-ibmcloud\n    cp credentials.template credentials.properties\n    ```\n\n- The `credentials.properties` file is already listed in the `.gitignore` file so that the file containing\nyour private API key will not be pushed to the server repository.\n\n### Step B. Set the IBM Cloud API key\n\n- Follow these instructions to create an IBM Cloud API key:\n\n    - [Managing user API keys](https://cloud.ibm.com/docs/iam?topic=iam-userapikey \"Managing user API keys\")\n\n- Edit the `credentials.properties` file to set the value for the `ibmcloud.api.key` property.\n\n</Tab>\n\n<Tab label=\"Configuration\">\n\n<PageDescription>\n\nConfigure the properties describing the environment\n\n</PageDescription>\n\nThe settings for creating the Developer Tools environment go in two properties files\nin the `./terraform/settings` directory:\n- `environment.tfvars` -- Properties for installing the Developer Tools\n\nFollow the instructions below to set the existing cluster's details in the `environment.tfvars` file.\n\n### Environment variables\n\nThe `environment.tfvars` properties will be used to install the Development Tools.\n\n- Typical values look like this:\n\n    ```bash\n    # The type of cluster that will be created/used (kubernetes or openshift)\n    cluster_type=\"kubernetes\"\n    # Flag indicating if we are using an existing cluster or creating a new one\n    cluster_exists=\"true\"\n\n    # The cluster name can be provided (particularly if using existing cluster) or it will\n    # default to '${resource_group_name}-cluster'\n    cluster_name=\"catalyst-team-cluster\"\n\n    resource_group_name=\"catalyst-team\"\n    ```\n\n- Set them based on the existing cluster:\n    - `resource_group_name` -- The existing cluster's resource group\n    - `cluster_name` -- The existing cluster's name\n    - `cluster_exists` -- Set to `\"true\"` for the existing cluster\n    - `cluster_type` -- Specify whether the existing cluster is **kubernetes** or **openshift**\n    - `postgres_server_exists` -- Specify whether the existing cluster already has an existing PostgreSQL service instance\n\n<InlineNotification>\n\nNote: **PostgreSQL** can take some time to provision, so in some cases it is worth manually creating an instance. It needs\nto be in the same region and names `<resource-group>-postgresql`.\n\n</InlineNotification>\n\n</Tab>\n\n<Tab label=\"Run\">\n\n<PageDescription>\n\nRun the scripts that create the environment\n\n</PageDescription>\n\nHaving configured the `credentials.properties`, `environment.tfvars`, and `vlan.tfvars` properties files,\nwe are now ready to kick off the installation.\n\nLaunch a [Developer Tools Docker container](https://github.com/ibm-garage-cloud/ibm-garage-cli-tools \"Cloud Garage Tools Docker image\").\n\n- Run the following command to run the Docker container:\n    ```bash\n    ./launch.sh\n    ```\n\n-  This will install the Cloud Garage Tools Docker image and exec shell into the running container. The container will\n    mount the filesystem's `./terraform/` directory as `/home/devops/src/`. Once the Docker container has started and\n    the script has exec shelled into it, you will see an IBM Garage banner. This will help you identify you are running\n    inside the Docker image that has just mounted your file system.\n\n    For more information on the **Developer Tools Image** see the following guide link below.\n\n- Create the Developer Tools environment\n\n    The supplied Terraform script is ready to run using the settings in the properties files.\n    You optionally can extend or modify the scripts and tailor them for your project's specific needs.\n\n<InlineNotification>\n\nNote: If you run this approach multiple times remember to delete any pre existing cloud services that were created previously\n\n</InlineNotification>\n\n- Run this script in the container:\n    ```bash\n    ./runTerraform.sh\n    ```\n\n    This script will create the Developer Tools environment.\n\n    The script will verify some basic settings and prompt if you want to proceed. After you select **Y** (for yes),\n    the Terraform Apply process will begin to create the infrastructure and services for your environment.\n\n    Installing the tools into an existing cluster takes about 30 minutes. At the end, you should have your Developer Tools environment\n    fully provisioned and configured. Enjoy!\n\n### Developer Tools environment\n\nOnce the Terraform scripts have finished, you can see the resources that the scripts created in IBM Cloud:\n- In the IBM Cloud console, open the [Resource List](https://cloud.ibm.com/docs/overview?topic=overview-ui#dashboardview \"Managing resources in the resource list\")\n- On the Resource List page, filter by your Resource Group (e.g. `catalyst-team`)\n- You should see these resources listed:\n    - **Clusters**: 1, either Kubernetes or OpenShift\n    - **Services**: 5 or so, such as PostgreSQL, LogDNA, etc.\n    - **Storage**: 1, an instance of Cloud Object Storage\n- Select the cluster and open the Kubernetes dashboard or OpenShift web console. You should see:\n    - Namespaces: `tools`, `dev`, `test`, and `staging`\n    - Deployments in the `tools` namespace: `catalyst-dashboard`, `jenkins`, etc.\n\nTo get started with code use the following guides:\n\n<AnchorLinks>\n  <AnchorLink to=\"/getting-started/deploy-app\">Deploy First App</AnchorLink>\n  <AnchorLink to=\"/guides/overview\">Guides</AnchorLink>\n  <AnchorLink to=\"guides/tools-image\">Developer Tools Image</AnchorLink>\n</AnchorLinks>\n\n### Possible issues\n\nIf you find that that the Terraform provisioning has failed, try re-running the `runTerraform.sh` script again.\nThe state will be saved and Terraform will try and apply the configuration to match the desired end state.\n\nIf you find that some of the services have failed to create in the time allocated, you can try this:\n- Manually delete the service instances in your resource group\n- Delete the `workspace` directory (which will remove any state that has been created by Terraform)\n- Re-run the `runTerraform.sh` script\n    ```bash\n    rm -rf workspace\n    ./runTerraform.sh\n    ```\n\n</Tab>\n\n</Tabs>\n\n","type":"Mdx","contentDigest":"ccc1d613962c02b546477e83d3662b50","counter":488,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Existing IBM Cloud cluster"},"exports":{},"rawBody":"---\ntitle: Existing IBM Cloud cluster\n---\n\n<Tabs>\n\n<Tab label=\"Pre-requisites\">\n\n<PageDescription>\n\nPrepare to run Terraform to install the Development Tools into an existing IBM Cloud managed cluster\n</PageDescription>\n\nThe IBM Garage for Cloud Developer Tools facilitate development and deployment of cloud-native applications. \nThey can be hosted in any Kubernetes or OpenShift cluster managed by IBM Cloud.\n\nYou must have created a IBM Cloud managed cluster using either the [IBM Cloud Kubernetes Service](https://cloud.ibm.com/docs/containers) or\n[Red Hat OpenShift on IBM Cloud](https://cloud.ibm.com/docs/openshift). \n\nThese instructions assume that the cluster has already been created and explain \nhow to configure and run the Terraform Infrastructure as Code to install the Developer Tools into that existing cluster.\n\nThe following pre-requisites are required before following the setup instructions:\n\n- An IBM Cloud account with the ability to provision cloud service instances in the same region and zone as the existing cluster\n- [Docker Desktop](https://www.docker.com/products/docker-desktop) installed and running on your local machine\n- [Node](https://nodejs.org/en/) installed on your local machine\n\n</Tab>\n\n<Tab label=\"Download\">\n\n<PageDescription>\n\nObtain the Terraform Infrastructure as Code that will install the tools into your IBM Cloud Managed Cluster\n\n</PageDescription>\n\n- Clone the [ibm-garage-iteration-zero](https://github.com/ibm-garage-cloud/ibm-garage-iteration-zero) Git repository to your local filesystem\n    ```bash\n    git clone git@github.com:ibm-garage-cloud/ibm-garage-iteration-zero.git\n    ```\n\n- Switch to the cloned directory\n    ```bash\n    cd ibm-garage-iteration-zero\n    ```\n\n</Tab>\n\n<Tab label=\"API key\">\n\n<PageDescription>\n\nConfigure the key the CLI uses to create cloud services\n\n</PageDescription>\n\n- The installation scripts need an API key to authenticate to IBM Cloud.\nThe following steps create the required API key and put them into a properties file.\n\n- The `credentials.properties` property file:\n    ```bash\n    classic.username=<CLASSIC_USERNAME>\n    classic.api.key=<CLASSIC_API_KEY>\n    ibmcloud.api.key=<IBMCLOUD_API_KEY>\n    ```\n\n- Since the cluster already exists, we'll only need to set the `ibmcloud.api.key` property.\n\n### Step A. Create the credentials.properties file\n\n- Inside the `iteration-zero-ibmcloud` folder, copy `credentials.template` to a file named `credentials.properties`.\n    ```bash\n    cd iteration-zero-ibmcloud\n    cp credentials.template credentials.properties\n    ```\n\n- The `credentials.properties` file is already listed in the `.gitignore` file so that the file containing\nyour private API key will not be pushed to the server repository.\n\n### Step B. Set the IBM Cloud API key\n\n- Follow these instructions to create an IBM Cloud API key:\n\n    - [Managing user API keys](https://cloud.ibm.com/docs/iam?topic=iam-userapikey \"Managing user API keys\")\n\n- Edit the `credentials.properties` file to set the value for the `ibmcloud.api.key` property.\n\n</Tab>\n\n<Tab label=\"Configuration\">\n\n<PageDescription>\n\nConfigure the properties describing the environment\n\n</PageDescription>\n\nThe settings for creating the Developer Tools environment go in two properties files\nin the `./terraform/settings` directory:\n- `environment.tfvars` -- Properties for installing the Developer Tools\n\nFollow the instructions below to set the existing cluster's details in the `environment.tfvars` file.\n\n### Environment variables\n\nThe `environment.tfvars` properties will be used to install the Development Tools.\n\n- Typical values look like this:\n\n    ```bash\n    # The type of cluster that will be created/used (kubernetes or openshift)\n    cluster_type=\"kubernetes\"\n    # Flag indicating if we are using an existing cluster or creating a new one\n    cluster_exists=\"true\"\n\n    # The cluster name can be provided (particularly if using existing cluster) or it will\n    # default to '${resource_group_name}-cluster'\n    cluster_name=\"catalyst-team-cluster\"\n\n    resource_group_name=\"catalyst-team\"\n    ```\n\n- Set them based on the existing cluster:\n    - `resource_group_name` -- The existing cluster's resource group\n    - `cluster_name` -- The existing cluster's name\n    - `cluster_exists` -- Set to `\"true\"` for the existing cluster\n    - `cluster_type` -- Specify whether the existing cluster is **kubernetes** or **openshift**\n    - `postgres_server_exists` -- Specify whether the existing cluster already has an existing PostgreSQL service instance\n\n<InlineNotification>\n\nNote: **PostgreSQL** can take some time to provision, so in some cases it is worth manually creating an instance. It needs\nto be in the same region and names `<resource-group>-postgresql`.\n\n</InlineNotification>\n\n</Tab>\n\n<Tab label=\"Run\">\n\n<PageDescription>\n\nRun the scripts that create the environment\n\n</PageDescription>\n\nHaving configured the `credentials.properties`, `environment.tfvars`, and `vlan.tfvars` properties files,\nwe are now ready to kick off the installation.\n\nLaunch a [Developer Tools Docker container](https://github.com/ibm-garage-cloud/ibm-garage-cli-tools \"Cloud Garage Tools Docker image\").\n\n- Run the following command to run the Docker container:\n    ```bash\n    ./launch.sh\n    ```\n\n-  This will install the Cloud Garage Tools Docker image and exec shell into the running container. The container will\n    mount the filesystem's `./terraform/` directory as `/home/devops/src/`. Once the Docker container has started and\n    the script has exec shelled into it, you will see an IBM Garage banner. This will help you identify you are running\n    inside the Docker image that has just mounted your file system.\n\n    For more information on the **Developer Tools Image** see the following guide link below.\n\n- Create the Developer Tools environment\n\n    The supplied Terraform script is ready to run using the settings in the properties files.\n    You optionally can extend or modify the scripts and tailor them for your project's specific needs.\n\n<InlineNotification>\n\nNote: If you run this approach multiple times remember to delete any pre existing cloud services that were created previously\n\n</InlineNotification>\n\n- Run this script in the container:\n    ```bash\n    ./runTerraform.sh\n    ```\n\n    This script will create the Developer Tools environment.\n\n    The script will verify some basic settings and prompt if you want to proceed. After you select **Y** (for yes),\n    the Terraform Apply process will begin to create the infrastructure and services for your environment.\n\n    Installing the tools into an existing cluster takes about 30 minutes. At the end, you should have your Developer Tools environment\n    fully provisioned and configured. Enjoy!\n\n### Developer Tools environment\n\nOnce the Terraform scripts have finished, you can see the resources that the scripts created in IBM Cloud:\n- In the IBM Cloud console, open the [Resource List](https://cloud.ibm.com/docs/overview?topic=overview-ui#dashboardview \"Managing resources in the resource list\")\n- On the Resource List page, filter by your Resource Group (e.g. `catalyst-team`)\n- You should see these resources listed:\n    - **Clusters**: 1, either Kubernetes or OpenShift\n    - **Services**: 5 or so, such as PostgreSQL, LogDNA, etc.\n    - **Storage**: 1, an instance of Cloud Object Storage\n- Select the cluster and open the Kubernetes dashboard or OpenShift web console. You should see:\n    - Namespaces: `tools`, `dev`, `test`, and `staging`\n    - Deployments in the `tools` namespace: `catalyst-dashboard`, `jenkins`, etc.\n\nTo get started with code use the following guides:\n\n<AnchorLinks>\n  <AnchorLink to=\"/getting-started/deploy-app\">Deploy First App</AnchorLink>\n  <AnchorLink to=\"/guides/overview\">Guides</AnchorLink>\n  <AnchorLink to=\"guides/tools-image\">Developer Tools Image</AnchorLink>\n</AnchorLinks>\n\n### Possible issues\n\nIf you find that that the Terraform provisioning has failed, try re-running the `runTerraform.sh` script again.\nThe state will be saved and Terraform will try and apply the configuration to match the desired end state.\n\nIf you find that some of the services have failed to create in the time allocated, you can try this:\n- Manually delete the service instances in your resource group\n- Delete the `workspace` directory (which will remove any state that has been created by Terraform)\n- Re-run the `runTerraform.sh` script\n    ```bash\n    rm -rf workspace\n    ./runTerraform.sh\n    ```\n\n</Tab>\n\n</Tabs>\n\n","fileAbsolutePath":"/Users/mjperrins/projects/cat/guide/src/pages/getting-started/installation-existing/index.mdx"}}}}