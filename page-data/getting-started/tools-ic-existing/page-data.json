{"componentChunkName":"component---src-pages-getting-started-tools-ic-existing-index-mdx","path":"/getting-started/tools-ic-existing/","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"Existing IBM Cloud cluster"},"relativePagePath":"/getting-started/tools-ic-existing/index.mdx","titleType":"page","MdxNode":{"id":"fb3042f4-81ac-59dd-9086-47aa04810c70","children":[],"parent":"c641a8b3-1202-53de-b360-f3733eaca61b","internal":{"content":"---\ntitle: Existing IBM Cloud cluster\n---\n\n<Tabs>\n\n<Tab label=\"Pre-requisites\">\n\n<PageDescription>\n\nPrepare to run the scripts that create the environment\n\n</PageDescription>\n\nThe IBM Garage for Cloud Developer Tools facilitate development and deployment of cloud-native applications. \nThey can be hosted in any Kubernetes or OpenShift cluster.\nIn IBM Cloud, the cluster is hosted by either the [IBM Cloud Kubernetes Service](https://cloud.ibm.com/docs/containers) or \n[Red Hat OpenShift on IBM Cloud](https://cloud.ibm.com/docs/openshift). \n\nThese instructions assume that the cluster has already been created and explain \nhow to access, configure, and run the scripts to install the Developer Tools into that existing cluster. \n\nThe following pre-requisites are required before following the setup instructions:\n\n- An IBM Cloud account with the ability to provision cloud service instances in the same region and zone as the existing cluster\n- [Docker Desktop](https://www.docker.com/products/docker-desktop) installed and running on your local machine\n- [Node](https://nodejs.org/en/) installed on your local machine\n\n</Tab>\n\n<Tab label=\"1. Download\">\n\n<PageDescription>\n\nObtain the scripts that create the environment\n\n</PageDescription>\n\nClone the [ibm-garage-iteration-zero](https://github.com/ibm-garage-cloud/ibm-garage-iteration-zero) Git repository to your local filesystem\n\n```bash\ngit clone git@github.com:ibm-garage-cloud/ibm-garage-iteration-zero.git\n```\n\nSwitch to the cloned directory\n\n```bash\ncd ibm-garage-iteration-zero\n```\n</Tab>\n\n<Tab label=\"2. API keys\">\n\n<PageDescription>\n\nConfigure the keys the CLI uses to authenticate\n\n</PageDescription>\n\nThe installation scripts need API keys to authenticate to IBM Cloud. \nThe following steps create the required API keys and put them into a file properties file.\n\nThe `credentials.properties` property file looks like this: \n\n```bash\nclassic.username=<CLASSIC_USERNAME>\nclassic.api.key=<CLASSIC_API_KEY>\nibmcloud.api.key=<IBMCLOUD_API_KEY>\n```\n\nSince the cluster already exists, we'll only need to set the `ibmcloud.api.key` property.\n\n### Step A. Create the credentials.properties file\n\n- Inside the `iteration-zero-ibmcloud` folder, copy `credentials.template` to a file named `credentials.properties`.\n\n```bash\ncd iteration-zero-ibmcloud\ncp credentials.template credentials.properties\n```\n\nThe `credentials.properties` file is already listed in the `.gitignore` file so that the file containing \nyour private API keys will not be pushed to the server repository.\n\n### Step B. Set the IBM Cloud API key\n\n- Follow these instructions to create an IBM Cloud API key:\n\n    - [Managing user API keys](https://cloud.ibm.com/docs/iam?topic=iam-userapikey \"Managing user API keys\")\n\n- Edit the `credentials.properties` file to set the value for the `ibmcloud.api.key` property.\n\n</Tab>\n\n<Tab label=\"3. Configuration\">\n\n<PageDescription>\n\nConfigure the properties describing the environment\n\n</PageDescription>\n\nThe settings for creating the Developer Tools environment go in two properties files\nin the `./terraform/settings` directory:\n- `environment.tfvars` -- Properties for installing the Developer Tools\n- `vlan.tfvars` -- Properties for creating the cluster\n\nFollow the instructions below to set the existing cluster's details in the `environment.tfvars` file.\nThe `vlan.tfvars` file must exist but will be ignored since the cluster already exists.\n\n### Environment variables\n\nThe `environment.tfvars` properties will be used to install the Development Tools.\n\nTypical values look like this:\n\n```bash\nresource_group_name=\"catalyst-team\"\ncluster_name=\"catalyst-team-cluster\"\n# The type of cluster that will be created/used (kubernetes or openshift)\ncluster_type=\"kubernetes\"\n# Flag indicating if we are using an existing cluster or creating a new one\ncluster_exists=\"false\"\n# Flag indicating if we are using an existing PostgreSQL server or creating a new one\npostgres_server_exists=\"false\"\n```\n\nSet them based on the existing cluster:\n- `resource_group_name` -- The existing cluster's resoruce group \n- `cluster_name` -- The existing cluster's name\n- `cluster_exists` -- Set to `\"true\"` for the existing cluster\n- `cluster_type` -- Specify whether the existing cluster is Kubernetes or OpenShift\n- `postgres_server_exists` -- Specify whether the existing cluster already has an existing PostgreSQL service instance\n\n</Tab>\n\n<Tab label=\"4. Run\">\n\n<PageDescription>\n\nRun the scripts that create the environment\n\n</PageDescription>\n\nHaving configured the `credentials.properties`, `environment.tfvars`, and `vlan.tfvars` properties files, \nwe are now ready to kick off the installation.\n\n- Launch a [Developer Tools Docker container](https://github.com/ibm-garage-cloud/ibm-garage-cli-tools \"Cloud Garage Tools Docker image\").\n\n    Run the following command to run the Docker container:\n\n    ```bash\n    ./launch.sh\n    ```\n\n    This will install the Cloud Garage Tools Docker image and exec shell into the running container. The container will \n    mount the filesystem's `./terraform/` directory as `/home/devops/src/`. Once the Docker container has started and \n    the script has exec shelled into it, you will see an IBM Garage banner. This will help you identify you are running \n    inside the Docker image that has just mounted your file system.\n\n    ```bash\n    % ./launch.sh\n    Cleaning up old container: ibm-garage-cli-tools-abcde\n    Initializing container ibm-garage-cli-tools-abcde from garagecatalyst/ibm-garage-cli-tools:0.0.24\n    d14e378eac5f8080dbaf5466d680396fc36f9fcf9433247409ea9b3a62326ad2\n    Attaching to running container...\n        ________  __  ___   ________                __   ______\n       /  _/ __ )/  |/  /  / ____/ /___  __  ______/ /  / ____/___ __________ _____ ____\n       / // __  / /|_/ /  / /   / / __ \\/ / / / __  /  / / __/ __ `/ ___/ __ `/ __ `/ _ \\\n     _/ // /_/ / /  / /  / /___/ / /_/ / /_/ / /_/ /  / /_/ / /_/ / /  / /_/ / /_/ /  __/\n    /___/_____/_/  /_/   \\____/_/\\____/\\__,_/\\__,_/   \\____/\\__,_/_/   \\__,_/\\__, /\\___/\n                                                                            /____/\n    Run 'image-help' to get a list of available tools, scripts, and ENV properties\n    ```\n\n    The `image-help` command shows what can be done in this conatiner:\n\n    ```bash\n    $ image-help\n    Available env properties (can be overridden for individual commands):\n    > BM_API_KEY - the IBM Cloud api key\n    > REGION - the IBM Cloud region (e.g. us-south)\n    > RESOURCE_GROUP - the IBM Cloud resource group\n    > CLUSTER_NAME - the name of the kubernetes cluster in IBM Cloud\n    > SL_USERNAME - the Classic Infrastructure user name or API user name (e.g. 282165_joe@us.ibm.com)\n    > SL_API_KEY - the Classic Infrastructure api key\n\n    Available tools:\n    > terraform (with helm, kube, and ibm provider plugins)\n    > calicoctl\n    > ibmcloud (with container-service, container-registry, and cloud-databases plugins)\n    > kubectl\n    > kustomize\n    > oc\n    > helm\n    > docker\n    > git\n    > nvm\n    > node (v11.12.0 currently installed)\n    > yo\n\n    Available scripts:\n    > init.sh {BM_API_KEY} {REGION} {RESOURCE_GROUP} {CLUSTER_NAME}\n    > createNamespaces.sh\n    > deleteNamespace.sh\n    > installHelm.sh\n    > cluster-pull-secret-apply.sh\n    > setup-namespace-pull-secrets.sh\n    > checkPodRunning.sh\n    > copy-secret-to-namespace.sh\n    ```\n\n- Create the Developer Tools environment\n\n    The supplied Terraform script is ready to run using the settings in the properties files. \n    You optionally can extend or modify the scripts and tailor them for your project's specific needs.\n\n    Run this script in the container:\n\n    ```bash\n    ./runTerraform.sh\n    ```\n\n    This script will create the Developer Tools environment.\n\n    The script will verify some basic settings and prompt if you want to proceed. After you select **Y** (for yes), \n    the Terraform Apply process will begin to create the infrastructure and services for your environment.\n\n    The existing cluster's contents will be cleaned up to prepare for the terraform \n    process. Any resources in the `tools`, `dev`, `test`, and `staging` namespaces will be deleted.\n\n    The installation process takes about 30 minutes. At the end, you should have your Developer Tools environment \n    fully provisioned and configured. Enjoy!\n\n### Developer Tools environment\n\nOnce the Terraform scripts have finished, you can see the resources that the scripts created.\n\nTo see this in IBM Cloud:\n- In the IBM Cloud console, open the [Resource List](https://cloud.ibm.com/docs/overview?topic=overview-ui#dashboardview \"Managing resources in the resource list\")\n- On the Resource List page, filter by your Resource Group (e.g. `catalyst-team`)\n- You should see these resources listed:\n    - **Clusters**: 1, either Kubernetes or OpenShift\n    - **Services**: 5 or so, such as PostgreSQL, LogDNA, etc.\n    - **Storage**: 1, an instance of Cloud Object Storage\n- Select the cluster and open the Kubernetes dashboard or OpenShift web console. You should see:\n    - Namespaces: `tools`, `dev`, `test`, and `staging`\n    - Deployments in the `tools` namespace: `catalyst-dashboard`, `jenkins`, etc.\n\n### Possible issues\n\nIf you find that that the Terraform provisioning has failed, try re-running the `runTerraform.sh` script again. \nThe state will be saved and Terraform will try and apply the configuration to match the desired end state.\n\nIf you find that some of the services have failed to create in the time allocated, you can try this:\n- Manually delete the service instances in your resource group\n- Delete the `workspace` directory (which will remove any state that has been created by Terraform)\n- Re-run the `runTerraform.sh` script\n\n```bash\nrm -rf workspace\n./runTerraform.sh\n```\n\n</Tab>\n\n</Tabs>\n\n","type":"Mdx","contentDigest":"48c74f06b547e230337dfb6bfa800784","counter":234,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Existing IBM Cloud cluster"},"exports":{},"rawBody":"---\ntitle: Existing IBM Cloud cluster\n---\n\n<Tabs>\n\n<Tab label=\"Pre-requisites\">\n\n<PageDescription>\n\nPrepare to run the scripts that create the environment\n\n</PageDescription>\n\nThe IBM Garage for Cloud Developer Tools facilitate development and deployment of cloud-native applications. \nThey can be hosted in any Kubernetes or OpenShift cluster.\nIn IBM Cloud, the cluster is hosted by either the [IBM Cloud Kubernetes Service](https://cloud.ibm.com/docs/containers) or \n[Red Hat OpenShift on IBM Cloud](https://cloud.ibm.com/docs/openshift). \n\nThese instructions assume that the cluster has already been created and explain \nhow to access, configure, and run the scripts to install the Developer Tools into that existing cluster. \n\nThe following pre-requisites are required before following the setup instructions:\n\n- An IBM Cloud account with the ability to provision cloud service instances in the same region and zone as the existing cluster\n- [Docker Desktop](https://www.docker.com/products/docker-desktop) installed and running on your local machine\n- [Node](https://nodejs.org/en/) installed on your local machine\n\n</Tab>\n\n<Tab label=\"1. Download\">\n\n<PageDescription>\n\nObtain the scripts that create the environment\n\n</PageDescription>\n\nClone the [ibm-garage-iteration-zero](https://github.com/ibm-garage-cloud/ibm-garage-iteration-zero) Git repository to your local filesystem\n\n```bash\ngit clone git@github.com:ibm-garage-cloud/ibm-garage-iteration-zero.git\n```\n\nSwitch to the cloned directory\n\n```bash\ncd ibm-garage-iteration-zero\n```\n</Tab>\n\n<Tab label=\"2. API keys\">\n\n<PageDescription>\n\nConfigure the keys the CLI uses to authenticate\n\n</PageDescription>\n\nThe installation scripts need API keys to authenticate to IBM Cloud. \nThe following steps create the required API keys and put them into a file properties file.\n\nThe `credentials.properties` property file looks like this: \n\n```bash\nclassic.username=<CLASSIC_USERNAME>\nclassic.api.key=<CLASSIC_API_KEY>\nibmcloud.api.key=<IBMCLOUD_API_KEY>\n```\n\nSince the cluster already exists, we'll only need to set the `ibmcloud.api.key` property.\n\n### Step A. Create the credentials.properties file\n\n- Inside the `iteration-zero-ibmcloud` folder, copy `credentials.template` to a file named `credentials.properties`.\n\n```bash\ncd iteration-zero-ibmcloud\ncp credentials.template credentials.properties\n```\n\nThe `credentials.properties` file is already listed in the `.gitignore` file so that the file containing \nyour private API keys will not be pushed to the server repository.\n\n### Step B. Set the IBM Cloud API key\n\n- Follow these instructions to create an IBM Cloud API key:\n\n    - [Managing user API keys](https://cloud.ibm.com/docs/iam?topic=iam-userapikey \"Managing user API keys\")\n\n- Edit the `credentials.properties` file to set the value for the `ibmcloud.api.key` property.\n\n</Tab>\n\n<Tab label=\"3. Configuration\">\n\n<PageDescription>\n\nConfigure the properties describing the environment\n\n</PageDescription>\n\nThe settings for creating the Developer Tools environment go in two properties files\nin the `./terraform/settings` directory:\n- `environment.tfvars` -- Properties for installing the Developer Tools\n- `vlan.tfvars` -- Properties for creating the cluster\n\nFollow the instructions below to set the existing cluster's details in the `environment.tfvars` file.\nThe `vlan.tfvars` file must exist but will be ignored since the cluster already exists.\n\n### Environment variables\n\nThe `environment.tfvars` properties will be used to install the Development Tools.\n\nTypical values look like this:\n\n```bash\nresource_group_name=\"catalyst-team\"\ncluster_name=\"catalyst-team-cluster\"\n# The type of cluster that will be created/used (kubernetes or openshift)\ncluster_type=\"kubernetes\"\n# Flag indicating if we are using an existing cluster or creating a new one\ncluster_exists=\"false\"\n# Flag indicating if we are using an existing PostgreSQL server or creating a new one\npostgres_server_exists=\"false\"\n```\n\nSet them based on the existing cluster:\n- `resource_group_name` -- The existing cluster's resoruce group \n- `cluster_name` -- The existing cluster's name\n- `cluster_exists` -- Set to `\"true\"` for the existing cluster\n- `cluster_type` -- Specify whether the existing cluster is Kubernetes or OpenShift\n- `postgres_server_exists` -- Specify whether the existing cluster already has an existing PostgreSQL service instance\n\n</Tab>\n\n<Tab label=\"4. Run\">\n\n<PageDescription>\n\nRun the scripts that create the environment\n\n</PageDescription>\n\nHaving configured the `credentials.properties`, `environment.tfvars`, and `vlan.tfvars` properties files, \nwe are now ready to kick off the installation.\n\n- Launch a [Developer Tools Docker container](https://github.com/ibm-garage-cloud/ibm-garage-cli-tools \"Cloud Garage Tools Docker image\").\n\n    Run the following command to run the Docker container:\n\n    ```bash\n    ./launch.sh\n    ```\n\n    This will install the Cloud Garage Tools Docker image and exec shell into the running container. The container will \n    mount the filesystem's `./terraform/` directory as `/home/devops/src/`. Once the Docker container has started and \n    the script has exec shelled into it, you will see an IBM Garage banner. This will help you identify you are running \n    inside the Docker image that has just mounted your file system.\n\n    ```bash\n    % ./launch.sh\n    Cleaning up old container: ibm-garage-cli-tools-abcde\n    Initializing container ibm-garage-cli-tools-abcde from garagecatalyst/ibm-garage-cli-tools:0.0.24\n    d14e378eac5f8080dbaf5466d680396fc36f9fcf9433247409ea9b3a62326ad2\n    Attaching to running container...\n        ________  __  ___   ________                __   ______\n       /  _/ __ )/  |/  /  / ____/ /___  __  ______/ /  / ____/___ __________ _____ ____\n       / // __  / /|_/ /  / /   / / __ \\/ / / / __  /  / / __/ __ `/ ___/ __ `/ __ `/ _ \\\n     _/ // /_/ / /  / /  / /___/ / /_/ / /_/ / /_/ /  / /_/ / /_/ / /  / /_/ / /_/ /  __/\n    /___/_____/_/  /_/   \\____/_/\\____/\\__,_/\\__,_/   \\____/\\__,_/_/   \\__,_/\\__, /\\___/\n                                                                            /____/\n    Run 'image-help' to get a list of available tools, scripts, and ENV properties\n    ```\n\n    The `image-help` command shows what can be done in this conatiner:\n\n    ```bash\n    $ image-help\n    Available env properties (can be overridden for individual commands):\n    > BM_API_KEY - the IBM Cloud api key\n    > REGION - the IBM Cloud region (e.g. us-south)\n    > RESOURCE_GROUP - the IBM Cloud resource group\n    > CLUSTER_NAME - the name of the kubernetes cluster in IBM Cloud\n    > SL_USERNAME - the Classic Infrastructure user name or API user name (e.g. 282165_joe@us.ibm.com)\n    > SL_API_KEY - the Classic Infrastructure api key\n\n    Available tools:\n    > terraform (with helm, kube, and ibm provider plugins)\n    > calicoctl\n    > ibmcloud (with container-service, container-registry, and cloud-databases plugins)\n    > kubectl\n    > kustomize\n    > oc\n    > helm\n    > docker\n    > git\n    > nvm\n    > node (v11.12.0 currently installed)\n    > yo\n\n    Available scripts:\n    > init.sh {BM_API_KEY} {REGION} {RESOURCE_GROUP} {CLUSTER_NAME}\n    > createNamespaces.sh\n    > deleteNamespace.sh\n    > installHelm.sh\n    > cluster-pull-secret-apply.sh\n    > setup-namespace-pull-secrets.sh\n    > checkPodRunning.sh\n    > copy-secret-to-namespace.sh\n    ```\n\n- Create the Developer Tools environment\n\n    The supplied Terraform script is ready to run using the settings in the properties files. \n    You optionally can extend or modify the scripts and tailor them for your project's specific needs.\n\n    Run this script in the container:\n\n    ```bash\n    ./runTerraform.sh\n    ```\n\n    This script will create the Developer Tools environment.\n\n    The script will verify some basic settings and prompt if you want to proceed. After you select **Y** (for yes), \n    the Terraform Apply process will begin to create the infrastructure and services for your environment.\n\n    The existing cluster's contents will be cleaned up to prepare for the terraform \n    process. Any resources in the `tools`, `dev`, `test`, and `staging` namespaces will be deleted.\n\n    The installation process takes about 30 minutes. At the end, you should have your Developer Tools environment \n    fully provisioned and configured. Enjoy!\n\n### Developer Tools environment\n\nOnce the Terraform scripts have finished, you can see the resources that the scripts created.\n\nTo see this in IBM Cloud:\n- In the IBM Cloud console, open the [Resource List](https://cloud.ibm.com/docs/overview?topic=overview-ui#dashboardview \"Managing resources in the resource list\")\n- On the Resource List page, filter by your Resource Group (e.g. `catalyst-team`)\n- You should see these resources listed:\n    - **Clusters**: 1, either Kubernetes or OpenShift\n    - **Services**: 5 or so, such as PostgreSQL, LogDNA, etc.\n    - **Storage**: 1, an instance of Cloud Object Storage\n- Select the cluster and open the Kubernetes dashboard or OpenShift web console. You should see:\n    - Namespaces: `tools`, `dev`, `test`, and `staging`\n    - Deployments in the `tools` namespace: `catalyst-dashboard`, `jenkins`, etc.\n\n### Possible issues\n\nIf you find that that the Terraform provisioning has failed, try re-running the `runTerraform.sh` script again. \nThe state will be saved and Terraform will try and apply the configuration to match the desired end state.\n\nIf you find that some of the services have failed to create in the time allocated, you can try this:\n- Manually delete the service instances in your resource group\n- Delete the `workspace` directory (which will remove any state that has been created by Terraform)\n- Re-run the `runTerraform.sh` script\n\n```bash\nrm -rf workspace\n./runTerraform.sh\n```\n\n</Tab>\n\n</Tabs>\n\n","fileAbsolutePath":"/Users/mjperrins/projects/cat/guide/src/pages/getting-started/tools-ic-existing/index.mdx"}}}}