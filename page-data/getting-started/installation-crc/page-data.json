{"componentChunkName":"component---src-pages-getting-started-installation-crc-index-mdx","path":"/getting-started/installation-crc/","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"CodeReady Containers"},"relativePagePath":"/getting-started/installation-crc/index.mdx","titleType":"page","MdxNode":{"id":"4f71598d-e065-5d63-af86-0ffc34ecd027","children":[],"parent":"f17addbc-5a88-5dfa-b654-8bbf773ec63e","internal":{"content":"---\ntitle: CodeReady Containers\n---\n\n<Tabs>\n\n<Tab label=\"Pre-requisites\">\n\n<PageDescription>\n\nPrepare to install developer tools into Red Hat CodeReady Containers on you Laptop\n\n</PageDescription>\n\nThe IBM Garage for Cloud Developer Tools facilitate development and deployment of cloud-native applications\nwith the Red Hat CodeReady Containers local OpenShift environment.\n\nThe following pre-requisites are required to support the installation.\n\n- CodeReady Containers [Minimum system requirements](https://access.redhat.com/documentation/en-us/red_hat_codeready_containers/1.0/html/getting_started_guide/getting-started-with-codeready-containers_gsg#minimum-system-requirements_gsg)\n- A [Red Hat account](https://access.redhat.com/login) is required\n\nThe following pre-requisites are required to support the setup instructions:\n\n- An installation of Red Hat CodeReady Containers\n- [Docker Desktop](https://www.docker.com/products/docker-desktop) installed and running on your local machine\n- [Node](https://nodejs.org/en/) installed on your local machine\n\n</Tab>\n\n<Tab label=\"Install CRC\">\n\n<PageDescription>\n\nDownload CRC and install it\n\n</PageDescription>\n\nInstall and configure CRC as described in [Install on Laptop](https://cloud.redhat.com/openshift/install/crc/installer-provisioned)\n\n- Remember to take a copy of **Pull Secret**\n\n- **CRC executable**: Copy the crc binary to your $PATH:\n\n- From the directory where you unzipped the download:\n    ```bash\n    cp crc /usr/local/bin\n    ```\n\nFollow these steps to complete the installation:\n\n- Run the following command from a terminal session:\n    ```bash\n    crc setup\n    ```\n- **Add memory**: By default, the CRC VM is set to only use 8 GB of RAM. The more RAM you can give it, the better.\n\n    To set it to 10 GB of RAM, do this after `crc setup` but before `crc start`:\n    ```bash\n    crc config set memory 10240\n    ```\n\n- **Start** the local CRC Cluster run the crc start command in a terminal window\n    ```bash\n    crc start\n    ```\n\n- During the installation process you will be prompted for your pull secret. Copy and Paste it into the terminal window.\n\n- Wait about 5 minutes for the VM initialization to complete. When complete, the kubeadmin password will be displayed. Make note of\nthis password because you will need it to log into the console.\n\n- Open the Cluster Admin **Console**\n    ```bash\n    crc console\n    ```\n- Open a web browser and go to the OpenShift console\n\n- Login with user id **kubeadmin** and the password that was displayed\nafter the `crc start` had completed.\n\nOther useful links:\n\n- [Getting started with Red Hat CodeReady Containers, Section 1.5](https://access.redhat.com/documentation/en-us/red_hat_codeready_containers/1.0/html/getting_started_guide/getting-started-with-codeready-containers_gsg)\n- [Installing CodeReady Containers](https://access.redhat.com/documentation/en-us/red_hat_codeready_containers/1.0/html/getting_started_guide/getting-started-with-codeready-containers_gsg#installing-codeready-containers_gsg).\n\n</Tab>\n\n<Tab label=\"Download\">\n\n<PageDescription>\n\nObtain the Terraform Infrastructure as Code that will install the tools into CodeReady Containers\n\n</PageDescription>\n\n- Clone the [ibm-garage-iteration-zero](https://github.com/ibm-garage-cloud/ibm-garage-iteration-zero) Git repository to your local filesystem\n    ```bash\n    git clone git@github.com:ibm-garage-cloud/ibm-garage-iteration-zero.git\n    ```\n\n- Switch to the cloned directory\n    ```bash\n    cd ibm-garage-iteration-zero\n    ```\n\n</Tab>\n\n<Tab label=\"API keys\">\n\n<PageDescription>\n\nConfigure the keys the CLI uses to authenticate\n\n</PageDescription>\n\nAPI keys are not needed to connect to CRC, but the file must still exist.\n\n- Inside the `iteration-zero-ibmcloud` folder, copy `credentials.template` to a file named `credentials.properties`.\n    ```bash\n    cd iteration-zero-ibmcloud\n    cp credentials.template credentials.properties\n    ```\n\nJust leave the property values blank, Terraform will not use them.\n\n</Tab>\n\n<Tab label=\"Configuration\">\n\n<PageDescription>\n\nConfigure the properties describing the environment\n\n</PageDescription>\n\nThe settings for creating the Developer Tools environment in CRC go in a single property file\nin the `./terraform/settings` directory:\n- `environment.tfvars` -- Properties for installing the Developer Tools\n\n### Environment variables\n\nUse the  `environment.tfvars` properties to configure the installation for the Development Tools.\n\nSet the following properties so they match below, all the other properties will be ignored:\n\n```bash\n# The type of cluster that will be created/used (kubernetes or openshift)\ncluster_type=\"crc\"\n# Flag indicating if we are using an existing cluster or creating a new one\ncluster_exists=\"true\"\n```\n\n</Tab>\n\n<Tab label=\"Run\">\n\n<PageDescription>\n\nRun Terraform to install the tools into the CRC environment\n\n</PageDescription>\n\nHaving configured the `credentials.properties`, `environment.tfvars` properties files,\nwe are now ready to kick off the installation.\n\n- Launch a [Developer Tools Docker container](https://github.com/ibm-garage-cloud/ibm-garage-cli-tools \"Cloud Garage Tools Docker image\").\n\n    Run the following command to run the Docker container:\n    ```bash\n    ./launch.sh\n    ```\n\n    For more information on the **Developer Tools Image** see the following guide:\n\n    This will install the Cloud Garage Tools Docker image and exec shell into the running container. The container will\n    mount the filesystem's `./terraform/` directory as `/home/devops/src/`. Once the Docker container has started and\n    the script has exec shelled into it, you will see an IBM Garage banner. This will help you identify you are running\n    inside the Docker image that has just mounted your file system.\n\n    The supplied Terraform scripts are ready to run using the settings in the properties files.\n    You optionally can extend or modify the scripts and tailor them for your project's specific needs.\n\n- From inside the terminal/containeryou need to log into the OpenShift cluster via the cli.\n    ```bash\n    oc login --insecure-skip-tls-verify=true -u kubeadmin -p <your-password> https://api.crc.testing:6443\n    ```\n\n    <InlineNotification>\n\n    NOTE: replace \"your-password\" with the password displayed when the \"crc start\" command command completed.\n\n    </InlineNotification>\n\n    Run this script in the container:\n\n    ```bash\n    ./runTerraform.sh\n    ```\n\n    This script will setup the Developer Tools in the CRC environment.\n\n    The script will verify some basic settings and prompt if you want to proceed. After you select **Y** (for yes),\n    the Terraform Apply process will begin to create the infrastructure and services for your environment.\n\n    The existing cluster's contents will be cleaned up to prepare for the terraform\n    process. Any resources in the `tools`, `dev`, `test`, and `staging` namespaces/projects will be deleted.\n\n    The installation process takes about 20 minutes. At the end, you should have your Developer Tools environment\n    fully provisioned and configured. Enjoy!\n\n### Finish\n\nOnce the Terraform scripts have finished, you can see the resources that the scripts created.\n\nTo see this:\n- Open the OpenShift web console. You should see:\n    - Namespaces: `tools`, `dev`, `test`, and `staging`\n    - Deployments in the `tools` namespace: `catalyst-dashboard`, `jenkins`, etc.\n\nTo get started with code using the following guides:\n\n<AnchorLinks>\n  <AnchorLink to=\"/getting-started/deploy-app\">Deploy First App</AnchorLink>\n  <AnchorLink to=\"/guides/overview\">Guides</AnchorLink>\n  <AnchorLink to=\"guides/tools-image\">Developer Tools Image</AnchorLink>\n</AnchorLinks>\n\n### Possible issues\n\nIf you find that that the Terraform provisioning has failed, try re-running the `runTerraform.sh` script again.\nThe state will be saved and Terraform will try and apply the configuration to match the desired end state.\n\n</Tab>\n\n</Tabs>","type":"Mdx","contentDigest":"17d88e868e782962e507693fbae3e44d","counter":490,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"CodeReady Containers"},"exports":{},"rawBody":"---\ntitle: CodeReady Containers\n---\n\n<Tabs>\n\n<Tab label=\"Pre-requisites\">\n\n<PageDescription>\n\nPrepare to install developer tools into Red Hat CodeReady Containers on you Laptop\n\n</PageDescription>\n\nThe IBM Garage for Cloud Developer Tools facilitate development and deployment of cloud-native applications\nwith the Red Hat CodeReady Containers local OpenShift environment.\n\nThe following pre-requisites are required to support the installation.\n\n- CodeReady Containers [Minimum system requirements](https://access.redhat.com/documentation/en-us/red_hat_codeready_containers/1.0/html/getting_started_guide/getting-started-with-codeready-containers_gsg#minimum-system-requirements_gsg)\n- A [Red Hat account](https://access.redhat.com/login) is required\n\nThe following pre-requisites are required to support the setup instructions:\n\n- An installation of Red Hat CodeReady Containers\n- [Docker Desktop](https://www.docker.com/products/docker-desktop) installed and running on your local machine\n- [Node](https://nodejs.org/en/) installed on your local machine\n\n</Tab>\n\n<Tab label=\"Install CRC\">\n\n<PageDescription>\n\nDownload CRC and install it\n\n</PageDescription>\n\nInstall and configure CRC as described in [Install on Laptop](https://cloud.redhat.com/openshift/install/crc/installer-provisioned)\n\n- Remember to take a copy of **Pull Secret**\n\n- **CRC executable**: Copy the crc binary to your $PATH:\n\n- From the directory where you unzipped the download:\n    ```bash\n    cp crc /usr/local/bin\n    ```\n\nFollow these steps to complete the installation:\n\n- Run the following command from a terminal session:\n    ```bash\n    crc setup\n    ```\n- **Add memory**: By default, the CRC VM is set to only use 8 GB of RAM. The more RAM you can give it, the better.\n\n    To set it to 10 GB of RAM, do this after `crc setup` but before `crc start`:\n    ```bash\n    crc config set memory 10240\n    ```\n\n- **Start** the local CRC Cluster run the crc start command in a terminal window\n    ```bash\n    crc start\n    ```\n\n- During the installation process you will be prompted for your pull secret. Copy and Paste it into the terminal window.\n\n- Wait about 5 minutes for the VM initialization to complete. When complete, the kubeadmin password will be displayed. Make note of\nthis password because you will need it to log into the console.\n\n- Open the Cluster Admin **Console**\n    ```bash\n    crc console\n    ```\n- Open a web browser and go to the OpenShift console\n\n- Login with user id **kubeadmin** and the password that was displayed\nafter the `crc start` had completed.\n\nOther useful links:\n\n- [Getting started with Red Hat CodeReady Containers, Section 1.5](https://access.redhat.com/documentation/en-us/red_hat_codeready_containers/1.0/html/getting_started_guide/getting-started-with-codeready-containers_gsg)\n- [Installing CodeReady Containers](https://access.redhat.com/documentation/en-us/red_hat_codeready_containers/1.0/html/getting_started_guide/getting-started-with-codeready-containers_gsg#installing-codeready-containers_gsg).\n\n</Tab>\n\n<Tab label=\"Download\">\n\n<PageDescription>\n\nObtain the Terraform Infrastructure as Code that will install the tools into CodeReady Containers\n\n</PageDescription>\n\n- Clone the [ibm-garage-iteration-zero](https://github.com/ibm-garage-cloud/ibm-garage-iteration-zero) Git repository to your local filesystem\n    ```bash\n    git clone git@github.com:ibm-garage-cloud/ibm-garage-iteration-zero.git\n    ```\n\n- Switch to the cloned directory\n    ```bash\n    cd ibm-garage-iteration-zero\n    ```\n\n</Tab>\n\n<Tab label=\"API keys\">\n\n<PageDescription>\n\nConfigure the keys the CLI uses to authenticate\n\n</PageDescription>\n\nAPI keys are not needed to connect to CRC, but the file must still exist.\n\n- Inside the `iteration-zero-ibmcloud` folder, copy `credentials.template` to a file named `credentials.properties`.\n    ```bash\n    cd iteration-zero-ibmcloud\n    cp credentials.template credentials.properties\n    ```\n\nJust leave the property values blank, Terraform will not use them.\n\n</Tab>\n\n<Tab label=\"Configuration\">\n\n<PageDescription>\n\nConfigure the properties describing the environment\n\n</PageDescription>\n\nThe settings for creating the Developer Tools environment in CRC go in a single property file\nin the `./terraform/settings` directory:\n- `environment.tfvars` -- Properties for installing the Developer Tools\n\n### Environment variables\n\nUse the  `environment.tfvars` properties to configure the installation for the Development Tools.\n\nSet the following properties so they match below, all the other properties will be ignored:\n\n```bash\n# The type of cluster that will be created/used (kubernetes or openshift)\ncluster_type=\"crc\"\n# Flag indicating if we are using an existing cluster or creating a new one\ncluster_exists=\"true\"\n```\n\n</Tab>\n\n<Tab label=\"Run\">\n\n<PageDescription>\n\nRun Terraform to install the tools into the CRC environment\n\n</PageDescription>\n\nHaving configured the `credentials.properties`, `environment.tfvars` properties files,\nwe are now ready to kick off the installation.\n\n- Launch a [Developer Tools Docker container](https://github.com/ibm-garage-cloud/ibm-garage-cli-tools \"Cloud Garage Tools Docker image\").\n\n    Run the following command to run the Docker container:\n    ```bash\n    ./launch.sh\n    ```\n\n    For more information on the **Developer Tools Image** see the following guide:\n\n    This will install the Cloud Garage Tools Docker image and exec shell into the running container. The container will\n    mount the filesystem's `./terraform/` directory as `/home/devops/src/`. Once the Docker container has started and\n    the script has exec shelled into it, you will see an IBM Garage banner. This will help you identify you are running\n    inside the Docker image that has just mounted your file system.\n\n    The supplied Terraform scripts are ready to run using the settings in the properties files.\n    You optionally can extend or modify the scripts and tailor them for your project's specific needs.\n\n- From inside the terminal/containeryou need to log into the OpenShift cluster via the cli.\n    ```bash\n    oc login --insecure-skip-tls-verify=true -u kubeadmin -p <your-password> https://api.crc.testing:6443\n    ```\n\n    <InlineNotification>\n\n    NOTE: replace \"your-password\" with the password displayed when the \"crc start\" command command completed.\n\n    </InlineNotification>\n\n    Run this script in the container:\n\n    ```bash\n    ./runTerraform.sh\n    ```\n\n    This script will setup the Developer Tools in the CRC environment.\n\n    The script will verify some basic settings and prompt if you want to proceed. After you select **Y** (for yes),\n    the Terraform Apply process will begin to create the infrastructure and services for your environment.\n\n    The existing cluster's contents will be cleaned up to prepare for the terraform\n    process. Any resources in the `tools`, `dev`, `test`, and `staging` namespaces/projects will be deleted.\n\n    The installation process takes about 20 minutes. At the end, you should have your Developer Tools environment\n    fully provisioned and configured. Enjoy!\n\n### Finish\n\nOnce the Terraform scripts have finished, you can see the resources that the scripts created.\n\nTo see this:\n- Open the OpenShift web console. You should see:\n    - Namespaces: `tools`, `dev`, `test`, and `staging`\n    - Deployments in the `tools` namespace: `catalyst-dashboard`, `jenkins`, etc.\n\nTo get started with code using the following guides:\n\n<AnchorLinks>\n  <AnchorLink to=\"/getting-started/deploy-app\">Deploy First App</AnchorLink>\n  <AnchorLink to=\"/guides/overview\">Guides</AnchorLink>\n  <AnchorLink to=\"guides/tools-image\">Developer Tools Image</AnchorLink>\n</AnchorLinks>\n\n### Possible issues\n\nIf you find that that the Terraform provisioning has failed, try re-running the `runTerraform.sh` script again.\nThe state will be saved and Terraform will try and apply the configuration to match the desired end state.\n\n</Tab>\n\n</Tabs>","fileAbsolutePath":"/Users/mjperrins/projects/cat/guide/src/pages/getting-started/installation-crc/index.mdx"}}}}