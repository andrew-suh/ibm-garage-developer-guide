{"componentChunkName":"component---src-pages-getting-started-installation-ibmcloud-index-mdx","path":"/getting-started/installation-ibmcloud/","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"Installation","description":"Walk you through the installation steps for Developer Tools","tabs":["Overview","Step 1","Step 2","Step 3","Step 4","Step 5","Wrapping up"]},"relativePagePath":"/getting-started/installation-ibmcloud/index.mdx","titleType":"page","MdxNode":{"id":"3ccda7b7-29f4-59a1-8859-a9ae0d38470e","children":[],"parent":"47400201-cc3e-5730-88d4-81942d05ce2b","internal":{"content":"---\ntitle: Installation\ndescription: Walk you through the installation steps for Developer Tools\ntabs:\n  ['Overview', 'Step 1', 'Step 2', 'Step 3', 'Step 4', 'Step 5', 'Wrapping up']\n---\n\n<PageDescription>\n\nUse these installation steps to help install and setup the IBM Garage for Cloud Developer Tools into your IBM Cloud account.\n\n</PageDescription>\n\n\n### Installation steps for Managed IBM Kubernetes Services or Managed Red Hat OpenShift\n\nFollow each step in turn:\n\n<Tabs>\n\n<Tab label=\"Pre-requisites\">\n\nThe IBM Garage for Cloud Developer Tools are hosted in a [IBM Cloud Kubernetes Service](https://cloud.ibm.com/docs/containers) or \n[Red Hat OpenShift on IBM Cloud](https://cloud.ibm.com/docs/openshift) clutser to use for application development. These \ninstructions explain how to access, configure, and run the scripts to create the cluster.\n\nThe following pre-requisties are required before following the setup instructions.\n\n- An IBM Cloud account with:\n    - the ability to provision resources to support [Kubernetes](https://cloud.ibm.com/kubernetes/clusters) \n    and [OpenShift](https://cloud.ibm.com/kubernetes/clusters?platformType=openshift) environments\n    - the ability to create a [Resource Group](https://cloud.ibm.com/account/resource-groups) for your development resources\n    - a region and zone containing [a pair of public and private VLANs](https://cloud.ibm.com/classic/network/vlans)\n- [Docker Desktop](https://www.docker.com/products/docker-desktop) installed and running on your local machine\n- [Node](https://nodejs.org/en/) installed on your local machine\n\n</Tab>\n<Tab label=\"Step 1: Clone\">\n\nClone the [ibm-garage-iteration-zero](https://github.com/ibm-garage-cloud/ibm-garage-iteration-zero) Git repository to your local filesystem\n\n```bash\ngit clone git@github.com:ibm-garage-cloud/ibm-garage-iteration-zero.git\n```\n\nSwitch to the cloned directory\n\n```bash\ncd ibm-garage-iteration-zero\n```\n</Tab>\n\n<Tab label=\"Step 2: API keys\">\n\nA Kubernetes or OpenShift clutser is a PaaS resource hosted in IaaS resources. \nAPI keys authenticate an [IBM Cloud CLI](https://cloud.ibm.com/docs/cli) client--such as a Terraform script--to create \nthese resources programatically. Two keys will be needed:\n- The first Key is for the Classic Infrastructure (IaaS) resources\n- The second key is for the IBM Cloud (PaaS) resources\n\nThe following steps create the required keys and put them into a file called `credentials.properties`.\n\n```properties\nclassic.username=<CLASSIC_USERNAME>\nclassic.api.key=<CLASSIC_API_KEY>\nibmcloud.api.key=<IBMCLOUD_API_KEY>\n```\n\nThe Iteration Zero library will use these settings to initialize its environment.\n\n### Step A. Create the credentials.properties file\n\n- Inside the `iteration-zero-ibmcloud` folder, copy `credentials.template` to a file named `credentials.properties`.\n\nThe `credentials.properties` file is already listed in the `.gitignore` file so that the file containing \nyour private API keys will not be pushed to the server repository.\n\n### Step B. Create and set the Classic infrastructure API key\n\n- Follow these instructions to create a Classic infrastructure API key: [Managing classic infrastructure API keys](https://cloud.ibm.com/docs/iam?topic=iam-classic_keys \"Managing classic infrastructure API keys\")\n\n    - In the IBM Cloud console, go to the IBM Cloud API Keys page\n\n    To open the IBM Cloud API Keys page, select **Manage -> Access (IAM)**, then select the **IBM Cloud API keys** tab.\n\n    - If your account already has a classic infrastructure API key, it will appear in the list of keys as **Classic infrastructure API key**. Otherwise, the page will have a **Create a classic infrastructure API key** button on the top. To crate the key, press that button and close the dialog.\n\n    ![API Keys](apikeys.png)\n\n    - Find **Classic infrastructure API key** in the list and open its details.\n\n    ![Classic Keys](classickeys.png)\n\n- Edit the `credentials.properties` file to set the values for the `classic.username` and `classic.api.key` properties.\n\n### Step C. Create and set the IBM Cloud API key\n\n- Follow these instructions to create an IBM Cloud API key:\n[Managing user API keys](https://cloud.ibm.com/docs/iam?topic=iam-userapikey \"Managing user API keys\")\n\n- Edit the `credentials.properties` file to set the value for the `ibmcloud.api.key` property.\n\n</Tab>\n\n<Tab label=\"Step 3: Resource Group\">\n\nBefore we can create resources--such as a Kubernetes or OpenShift cluster--we need to create a resource group. \n[IBM Cloud Identity and Access Management](https://cloud.ibm.com/docs/iam) uses a resource group to organize \na set of resources so that one access policy can easily be applied to all of the resources. This resource group\nwill help distinguish the Cloud Developer Tools resources from the other resources in the same IBM Cloud account. \n\nCreate a dedicated resource group for your development team. This resource group will contain the Cloud Developer \nTools' resources--your development cluster and supporting cloud services.\n\n- Follow these instructions to create a resource group:\n[Creating a resource group](https://cloud.ibm.com/docs/resources?topic=resources-rgs#create_rgs \"Creating a resource group\")\n\nRemember the name of your resource group, you'll need to set it in a configuration file.\n\n</Tab>\n\n<Tab label=\"Step 4: VLANs\">\n\nA Kubernetes or OpenShift cluster uses two VLANs, a public VLAN and a private VLAN. In IBM Cloud, a single zone cluster\nis hosted in a particular zone in a particular region. If the account you're using has multiple regions and zones,\nyou need to decide what region and zone you'll want the cluster cerated in, then specify VLANs in that zone.\n\nThere are two approaches for determing the VLAN info:\n- Advanced users can view the list of VLANs in their account and choose which VLANs to use.\n- For users who want a simpler approach, the Cloud Developer Tools include a CLI which can tell you \nthe VLAN info for the first zone in the region you specify. \n\nEither way, once you determine the VLAN info, you need to set it in the `terraform.tfvars` properties file.\n\n### Option A. Select from account's VLAN List (Advanced)\n\n[Getting started with VLANs](https://cloud.ibm.com/docs/infrastructure/vlans) explains how to open the\nVLAN List page in the console. Choose the public and private VLANs for the region and zone you want to\nhost the Cloud Developer Tools. \n\n### Option B. Install and use the Developer Tools CLI (Simpler)\n\nThe Developer Tools CLI has a command to gather this information for you, in a format that is \neasy to cut/paste into the `terraform.tfvars` properties file.\n\n- Install the [IBM Garage Developer Tools CLI](https://github.ibm.com/garage-catalyst/ibmcloud-garage-cli):\n    ```bash\n    npm i -g @garage-catalyst/ibm-garage-cloud-cli\n    ````\n- Log into your IBM Cloud Account with the correct region and resource group:\n    ```bash\n    ibmcloud login -a cloud.ibm.com -r <region> -g <resource group>\n    ```\n- Run the CLI command to obtain the VLAN information:\n    ```bash\n    igc vlan\n    ```\n    You will now have a set of properties that can be copied directly into your `terraform.tfvars`.\n\nRemember your VLAN ID and routers, you'll need to set them in a configuration file.\n\n</Tab>\n\n<Tab label=\"Step 5: Variables\">\n\nThe settings for creating the Cloud Developer Tools cluster go in a file called `terraform.tfvars`.\n\n### Step A. Set the required Terraform variables\n\nEdit the `./terraform/settings/terraform.tfvars` file to set the resource group, VLANs, and other values gathered from the previous steps.\nMany of these values can be copied directly from the output of \nthe [IBM Garage Developer Tools CLI](https://github.ibm.com/garage-catalyst/ibmcloud-garage-cli) command `igc vlan`.\n\nTypical values look like this:\n\n```terraform\nresource_group_name=\"catalyst-team\"\nvlan_region=\"us-south\"\nvlan_datacenter=\"dal10\"\npublic_vlan_id=\"2366011\"\nprivate_vlan_id=\"2366012\"\ncluster_name=\"catalyst-team-cluster\"\n```\n\n### Step B. Set the optional Terraform variables\n\nThe `terraform.tfvars` file has three additional properties that specify optional settings.\n\n```terraform\n# The type of cluster that will be created/used (kubernetes or openshift)\ncluster_type=\"kubernetes\"\n# Flag indicating if we are using an existing cluster or creating a new one\ncluster_exists=\"false\"\n# Flag indicating if we are using an existing postgres server or creating a new one\npostgres_server_exists=\"false\"\n```\n\nThese are scenarios for using these optioal settings:\n- To specify whether the cluster is Kubernetes or OpenShift, set `cluster_type`.\n\n- To specify installing the tools into an existing cluster, set `cluster_exists`, `cluster_type`, and  `cluster_name`.\n\n- To specify that the existing cluster already has a Postgres service instance, set `postgres_server_exists`.\n\n- If you are installing into an existing cluster you can ignore the step that requires you to obtain the VLAN information.\n\n</Tab>\n\n<Tab label=\"Step 6: Run\">\n\nWe are now ready to kick off the installation.\n\n- Run the following command to launch a IBM Garage [Developer Tools CLI Tools Docker container](https://github.ibm.com/garage-catalyst/client-tools-image).\n\n    ```bash\n    ./launch.sh\n    ```\n\n    This will install the Cloud Garage Tools docker image and exec shell into the running container. The container will \n    mount the filesystem's `./terraform/` directory as `/home/devops/src/`. Once the Docker container has started and \n    the script has exec shelled into it, you will see an IBM Garage banner. This will help you identify you are running \n    inside the Docker image that has just mounted your file system.\n\n    The supplied Terraform script is ready to run. You optionally can extend or modify the scripts and tailor them for \n    your project's specific needs.\n\n- Run this script in the container:\n\n    ```bash\n    ./runTerraform.sh\n    ```\n\n    This script will create the Cloud Developer Tools environment.\n\n    The script will prompt if you want to proceed. After you select **Y**, the Terraform Apply process will begin to \n    create the infrastructure and services for your environment.\n\n    If an existing cluster is selected, the contents will be cleaned up to prepare for the terraform \n    process (the `tools`, `dev`, `test`, and `staging` namespaces).\n\n    Creating a new cluster takes about 1.5 hours on average (but can also take considerably longer) \n    and the rest of the process takes about 30 minutes. At the end, you should have your Iteration Zero \n    resources fully provisioned and configured. Enjoy!\n\n- Once the Terraform scripts have finished, you can see the scripts created in IBM Cloud\n    - In the IBM Cloud console, open the Resource List \n    (see [Managing resources in the resource list](https://cloud.ibm.com/docs/overview?topic=overview-ui#dashboardview))\n    - On the Resource List page, filter by your Resource Group (e.g. `catalyst-team`)\n    - You should see these resources listed:\n        - **Clusters**: 1, either Kubernetes or OpenShift\n        - **Services**: 5 or so, such as PostgreSQL, LogDNA, etc.\n        - **Storage**: 1, an instance of Cloud Object Storage\n    - Select the cluster and open the Kubernetes dashboard or OpenShift web console. You should see:\n        - Namespaces: `tools`, `dev`, `test`, and `staging`\n        - Deployments in the `tools` namespace: `catalyst-dashboard`, `jenkins`, etc.\n\n</Tab>\n\n</Tabs>\n\n### Installation instructions for Red Hat Code Ready Containers\n\nFollow each step in turn:\n\n<Tabs>\n\n<Tab label=\"Pre-requisites\">\n\n## Coming Soon ...\n\n</Tab>\n</Tabs>\n\n### Development Cluster Dashboard\n\nOnce the installation has completed you can use the Development Cluster Dashboard to navigate to the installed tools.\n\nTo access the dashboard obtain the ingress endpoint using the developer CLI.\n\n```bash\nigc ingress -n tools\n```\n\nThis will return the ingress URLs for each of the tools.\n\n```bash\nHost(s):\n[\n  'http://grpc.argocd.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud',\n  'http://argocd.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud',\n  'http://artifactory.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud',\n  'http://dashboard.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud',\n  'http://jenkins.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud',\n  'http://pact.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud',\n  'http://sonarqube.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud'\n]\n```\n\nSelect the one called `dashboard` and open it in your browser.\n\n![Dashboard](devcluster.png)\n\n### Credentials\n\nCurrently the tools are not linked to a single sign on service (future plan), other than Jenkins in OpenShift, to obtain the credentials for the tools login into ibm cloud account on the command line and run `igc credentials` this will list the `userids` and `passwords` secrets for each tool installed.\nYou can use these details to login.\n\n```bash\nigc credentials\n```\n","type":"Mdx","contentDigest":"406ace70ba310ed510baee3c720723d7","counter":227,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Installation","description":"Walk you through the installation steps for Developer Tools","tabs":["Overview","Step 1","Step 2","Step 3","Step 4","Step 5","Wrapping up"]},"exports":{},"rawBody":"---\ntitle: Installation\ndescription: Walk you through the installation steps for Developer Tools\ntabs:\n  ['Overview', 'Step 1', 'Step 2', 'Step 3', 'Step 4', 'Step 5', 'Wrapping up']\n---\n\n<PageDescription>\n\nUse these installation steps to help install and setup the IBM Garage for Cloud Developer Tools into your IBM Cloud account.\n\n</PageDescription>\n\n\n### Installation steps for Managed IBM Kubernetes Services or Managed Red Hat OpenShift\n\nFollow each step in turn:\n\n<Tabs>\n\n<Tab label=\"Pre-requisites\">\n\nThe IBM Garage for Cloud Developer Tools are hosted in a [IBM Cloud Kubernetes Service](https://cloud.ibm.com/docs/containers) or \n[Red Hat OpenShift on IBM Cloud](https://cloud.ibm.com/docs/openshift) clutser to use for application development. These \ninstructions explain how to access, configure, and run the scripts to create the cluster.\n\nThe following pre-requisties are required before following the setup instructions.\n\n- An IBM Cloud account with:\n    - the ability to provision resources to support [Kubernetes](https://cloud.ibm.com/kubernetes/clusters) \n    and [OpenShift](https://cloud.ibm.com/kubernetes/clusters?platformType=openshift) environments\n    - the ability to create a [Resource Group](https://cloud.ibm.com/account/resource-groups) for your development resources\n    - a region and zone containing [a pair of public and private VLANs](https://cloud.ibm.com/classic/network/vlans)\n- [Docker Desktop](https://www.docker.com/products/docker-desktop) installed and running on your local machine\n- [Node](https://nodejs.org/en/) installed on your local machine\n\n</Tab>\n<Tab label=\"Step 1: Clone\">\n\nClone the [ibm-garage-iteration-zero](https://github.com/ibm-garage-cloud/ibm-garage-iteration-zero) Git repository to your local filesystem\n\n```bash\ngit clone git@github.com:ibm-garage-cloud/ibm-garage-iteration-zero.git\n```\n\nSwitch to the cloned directory\n\n```bash\ncd ibm-garage-iteration-zero\n```\n</Tab>\n\n<Tab label=\"Step 2: API keys\">\n\nA Kubernetes or OpenShift clutser is a PaaS resource hosted in IaaS resources. \nAPI keys authenticate an [IBM Cloud CLI](https://cloud.ibm.com/docs/cli) client--such as a Terraform script--to create \nthese resources programatically. Two keys will be needed:\n- The first Key is for the Classic Infrastructure (IaaS) resources\n- The second key is for the IBM Cloud (PaaS) resources\n\nThe following steps create the required keys and put them into a file called `credentials.properties`.\n\n```properties\nclassic.username=<CLASSIC_USERNAME>\nclassic.api.key=<CLASSIC_API_KEY>\nibmcloud.api.key=<IBMCLOUD_API_KEY>\n```\n\nThe Iteration Zero library will use these settings to initialize its environment.\n\n### Step A. Create the credentials.properties file\n\n- Inside the `iteration-zero-ibmcloud` folder, copy `credentials.template` to a file named `credentials.properties`.\n\nThe `credentials.properties` file is already listed in the `.gitignore` file so that the file containing \nyour private API keys will not be pushed to the server repository.\n\n### Step B. Create and set the Classic infrastructure API key\n\n- Follow these instructions to create a Classic infrastructure API key: [Managing classic infrastructure API keys](https://cloud.ibm.com/docs/iam?topic=iam-classic_keys \"Managing classic infrastructure API keys\")\n\n    - In the IBM Cloud console, go to the IBM Cloud API Keys page\n\n    To open the IBM Cloud API Keys page, select **Manage -> Access (IAM)**, then select the **IBM Cloud API keys** tab.\n\n    - If your account already has a classic infrastructure API key, it will appear in the list of keys as **Classic infrastructure API key**. Otherwise, the page will have a **Create a classic infrastructure API key** button on the top. To crate the key, press that button and close the dialog.\n\n    ![API Keys](apikeys.png)\n\n    - Find **Classic infrastructure API key** in the list and open its details.\n\n    ![Classic Keys](classickeys.png)\n\n- Edit the `credentials.properties` file to set the values for the `classic.username` and `classic.api.key` properties.\n\n### Step C. Create and set the IBM Cloud API key\n\n- Follow these instructions to create an IBM Cloud API key:\n[Managing user API keys](https://cloud.ibm.com/docs/iam?topic=iam-userapikey \"Managing user API keys\")\n\n- Edit the `credentials.properties` file to set the value for the `ibmcloud.api.key` property.\n\n</Tab>\n\n<Tab label=\"Step 3: Resource Group\">\n\nBefore we can create resources--such as a Kubernetes or OpenShift cluster--we need to create a resource group. \n[IBM Cloud Identity and Access Management](https://cloud.ibm.com/docs/iam) uses a resource group to organize \na set of resources so that one access policy can easily be applied to all of the resources. This resource group\nwill help distinguish the Cloud Developer Tools resources from the other resources in the same IBM Cloud account. \n\nCreate a dedicated resource group for your development team. This resource group will contain the Cloud Developer \nTools' resources--your development cluster and supporting cloud services.\n\n- Follow these instructions to create a resource group:\n[Creating a resource group](https://cloud.ibm.com/docs/resources?topic=resources-rgs#create_rgs \"Creating a resource group\")\n\nRemember the name of your resource group, you'll need to set it in a configuration file.\n\n</Tab>\n\n<Tab label=\"Step 4: VLANs\">\n\nA Kubernetes or OpenShift cluster uses two VLANs, a public VLAN and a private VLAN. In IBM Cloud, a single zone cluster\nis hosted in a particular zone in a particular region. If the account you're using has multiple regions and zones,\nyou need to decide what region and zone you'll want the cluster cerated in, then specify VLANs in that zone.\n\nThere are two approaches for determing the VLAN info:\n- Advanced users can view the list of VLANs in their account and choose which VLANs to use.\n- For users who want a simpler approach, the Cloud Developer Tools include a CLI which can tell you \nthe VLAN info for the first zone in the region you specify. \n\nEither way, once you determine the VLAN info, you need to set it in the `terraform.tfvars` properties file.\n\n### Option A. Select from account's VLAN List (Advanced)\n\n[Getting started with VLANs](https://cloud.ibm.com/docs/infrastructure/vlans) explains how to open the\nVLAN List page in the console. Choose the public and private VLANs for the region and zone you want to\nhost the Cloud Developer Tools. \n\n### Option B. Install and use the Developer Tools CLI (Simpler)\n\nThe Developer Tools CLI has a command to gather this information for you, in a format that is \neasy to cut/paste into the `terraform.tfvars` properties file.\n\n- Install the [IBM Garage Developer Tools CLI](https://github.ibm.com/garage-catalyst/ibmcloud-garage-cli):\n    ```bash\n    npm i -g @garage-catalyst/ibm-garage-cloud-cli\n    ````\n- Log into your IBM Cloud Account with the correct region and resource group:\n    ```bash\n    ibmcloud login -a cloud.ibm.com -r <region> -g <resource group>\n    ```\n- Run the CLI command to obtain the VLAN information:\n    ```bash\n    igc vlan\n    ```\n    You will now have a set of properties that can be copied directly into your `terraform.tfvars`.\n\nRemember your VLAN ID and routers, you'll need to set them in a configuration file.\n\n</Tab>\n\n<Tab label=\"Step 5: Variables\">\n\nThe settings for creating the Cloud Developer Tools cluster go in a file called `terraform.tfvars`.\n\n### Step A. Set the required Terraform variables\n\nEdit the `./terraform/settings/terraform.tfvars` file to set the resource group, VLANs, and other values gathered from the previous steps.\nMany of these values can be copied directly from the output of \nthe [IBM Garage Developer Tools CLI](https://github.ibm.com/garage-catalyst/ibmcloud-garage-cli) command `igc vlan`.\n\nTypical values look like this:\n\n```terraform\nresource_group_name=\"catalyst-team\"\nvlan_region=\"us-south\"\nvlan_datacenter=\"dal10\"\npublic_vlan_id=\"2366011\"\nprivate_vlan_id=\"2366012\"\ncluster_name=\"catalyst-team-cluster\"\n```\n\n### Step B. Set the optional Terraform variables\n\nThe `terraform.tfvars` file has three additional properties that specify optional settings.\n\n```terraform\n# The type of cluster that will be created/used (kubernetes or openshift)\ncluster_type=\"kubernetes\"\n# Flag indicating if we are using an existing cluster or creating a new one\ncluster_exists=\"false\"\n# Flag indicating if we are using an existing postgres server or creating a new one\npostgres_server_exists=\"false\"\n```\n\nThese are scenarios for using these optioal settings:\n- To specify whether the cluster is Kubernetes or OpenShift, set `cluster_type`.\n\n- To specify installing the tools into an existing cluster, set `cluster_exists`, `cluster_type`, and  `cluster_name`.\n\n- To specify that the existing cluster already has a Postgres service instance, set `postgres_server_exists`.\n\n- If you are installing into an existing cluster you can ignore the step that requires you to obtain the VLAN information.\n\n</Tab>\n\n<Tab label=\"Step 6: Run\">\n\nWe are now ready to kick off the installation.\n\n- Run the following command to launch a IBM Garage [Developer Tools CLI Tools Docker container](https://github.ibm.com/garage-catalyst/client-tools-image).\n\n    ```bash\n    ./launch.sh\n    ```\n\n    This will install the Cloud Garage Tools docker image and exec shell into the running container. The container will \n    mount the filesystem's `./terraform/` directory as `/home/devops/src/`. Once the Docker container has started and \n    the script has exec shelled into it, you will see an IBM Garage banner. This will help you identify you are running \n    inside the Docker image that has just mounted your file system.\n\n    The supplied Terraform script is ready to run. You optionally can extend or modify the scripts and tailor them for \n    your project's specific needs.\n\n- Run this script in the container:\n\n    ```bash\n    ./runTerraform.sh\n    ```\n\n    This script will create the Cloud Developer Tools environment.\n\n    The script will prompt if you want to proceed. After you select **Y**, the Terraform Apply process will begin to \n    create the infrastructure and services for your environment.\n\n    If an existing cluster is selected, the contents will be cleaned up to prepare for the terraform \n    process (the `tools`, `dev`, `test`, and `staging` namespaces).\n\n    Creating a new cluster takes about 1.5 hours on average (but can also take considerably longer) \n    and the rest of the process takes about 30 minutes. At the end, you should have your Iteration Zero \n    resources fully provisioned and configured. Enjoy!\n\n- Once the Terraform scripts have finished, you can see the scripts created in IBM Cloud\n    - In the IBM Cloud console, open the Resource List \n    (see [Managing resources in the resource list](https://cloud.ibm.com/docs/overview?topic=overview-ui#dashboardview))\n    - On the Resource List page, filter by your Resource Group (e.g. `catalyst-team`)\n    - You should see these resources listed:\n        - **Clusters**: 1, either Kubernetes or OpenShift\n        - **Services**: 5 or so, such as PostgreSQL, LogDNA, etc.\n        - **Storage**: 1, an instance of Cloud Object Storage\n    - Select the cluster and open the Kubernetes dashboard or OpenShift web console. You should see:\n        - Namespaces: `tools`, `dev`, `test`, and `staging`\n        - Deployments in the `tools` namespace: `catalyst-dashboard`, `jenkins`, etc.\n\n</Tab>\n\n</Tabs>\n\n### Installation instructions for Red Hat Code Ready Containers\n\nFollow each step in turn:\n\n<Tabs>\n\n<Tab label=\"Pre-requisites\">\n\n## Coming Soon ...\n\n</Tab>\n</Tabs>\n\n### Development Cluster Dashboard\n\nOnce the installation has completed you can use the Development Cluster Dashboard to navigate to the installed tools.\n\nTo access the dashboard obtain the ingress endpoint using the developer CLI.\n\n```bash\nigc ingress -n tools\n```\n\nThis will return the ingress URLs for each of the tools.\n\n```bash\nHost(s):\n[\n  'http://grpc.argocd.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud',\n  'http://argocd.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud',\n  'http://artifactory.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud',\n  'http://dashboard.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud',\n  'http://jenkins.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud',\n  'http://pact.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud',\n  'http://sonarqube.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud'\n]\n```\n\nSelect the one called `dashboard` and open it in your browser.\n\n![Dashboard](devcluster.png)\n\n### Credentials\n\nCurrently the tools are not linked to a single sign on service (future plan), other than Jenkins in OpenShift, to obtain the credentials for the tools login into ibm cloud account on the command line and run `igc credentials` this will list the `userids` and `passwords` secrets for each tool installed.\nYou can use these details to login.\n\n```bash\nigc credentials\n```\n","fileAbsolutePath":"/Users/mjperrins/projects/cat/guide/src/pages/getting-started/installation-ibmcloud/index.mdx"}}}}