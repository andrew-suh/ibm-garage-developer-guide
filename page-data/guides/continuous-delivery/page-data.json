{"componentChunkName":"component---src-pages-guides-continuous-delivery-index-mdx","path":"/guides/continuous-delivery/","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"Continuous Delivery"},"relativePagePath":"/guides/continuous-delivery/index.mdx","titleType":"page","MdxNode":{"id":"0c0b0e8a-dd6d-53c9-aa7b-b03f2f7bac07","children":[],"parent":"8d3d7344-aadc-535e-bde3-cca6c6208e4f","internal":{"content":"---\ntitle: Continuous Delivery\n---\n\n<PageDescription>\n\nUse ArgoCD to continuously deliver application changes into the runtime environment\n\n</PageDescription>\n\nIn IBM Garage Method, one of the Develop practices is [continuous delivery](https://www.ibm.com/garage/method/practices/deliver/practice_continuous_delivery/).\nThe Developer Tools environment uses an ArgoCD pipeline to automate continuous delivery.\n\n## What is continuous delivery\n\nContinuous delivery is the DevOps approach of continuously making new versions of a application components available\nfor deployment to an environment. The process involves automation of the build and validation process and concludes with\na new version of the application that is available for promotion to another environment.\n\nContinuous Delivery is closely related to Continuous Deployment with the only distinction being that in \nContinuous Deployment the new versions are automatically deployed into the next environment. In Continuous\nDelivery the automated deployment requires the deployment to be manually triggered.\n\n## What is Git Ops\n\n[GitOps](https://www.weave.works/technologies/gitops/) is the operational pattern of using Git repositories as the source of truth for\ndefining the configuration that makes up the desired state of the application.\n\n## Common tools\n\n### What is ArgoCD\n\n\"ArgoCD is a delarative, GitOps continuous delivery tools for Kubernetes\"\n\nIt supports defining kubernetes manifests in a number of ways:\n\n- kustomize\n- helm charts\n- ksonnet\n- jsonnet\n- plain directory of yaml/json manifests\n\nArgoCD synchronizes the application state with the desired state defined in Git and\nautomates the deployment of kubernetes resources to ensure they match.\n\n### Configuring GitOps with ArgoCD\n\nYou must have completed the [ArgoCD Setup](/getting-started/argocd-setup) before continuing.\n\n**Terminology:**\n\nArgoCD uses a number of terms to refer to the components\n\n- `Application` - a deployable unit\n\n    In the context of the Dev Tools, that will map to one helm chart that contains one container image \n    that was produced by one CI pipeline. While helm charts and images could certainly be combined to\n    make more sophisticated applications in more advanced scenarios, we will be using this simple definition\n    here.\n    \n- `Project` - a collection of applications that make up a solution\n\n#### Find the url to the Artifactory helm repository\n\nAssuming a build has already completed successfully and published the result to Artifactory then use the following steps:\n\n1. Open the Artifactory dashboard from the [Developer Tools Dashboard](/getting-started/dashboard) and login\n\n2. Select `Artifacts` from the left nav menu\n\n3. In the `Artifact Repository Browser`, expand the `generic-local` folder and the folder beneath it.\n\n4. Click on the `index.yaml` file\n\n5. In the details pane on the right, right-click on the `Download` link and copy the link address.\n\n6. Open a text editor and paste the link address value into it. The helm repository url should be the value \nexcluding `index.yaml` \n\n    For example, for `https://artifactory.test.com/artifactory/generic-local/test/index.yaml` the helm repository\n    url would be `https://artifactory.test.com/artifactory/generic-local/test`\n\n#### Setup the GitOps repo\n\nArgoCD uses a Git repo to express the desired state of the Kubernetes environment. We recommend using\none repository to represent one `project`. Within that repository we will have a separate folder for \neach `application` that will be part of the `project`. The repository will also contain a branch for \neach environment/namespace into which we want to deploy the applications.\n\n1. Create a new repo from the ArgoCD Starter Kit template - https://github.com/ibm-garage-cloud/template-argocd-test/generate\n\n2. Clone the project to your machine\n\n3. Create a branch named `test` to configure the values for deployment to the `test` environment\n\n    ```bash\n    git checkout -b test\n    ```\n\n4. The repository contains a template helm chart in the `app-artifactory` folder. Copy that folder and rename it to match one of \nthe application names in your project.\n\n   The application name should match the repository name if the CI pipeline is going push changes to the \n   CD pipeline.\n\n5. Update `Chart.yaml`\n\n   - `name` - the name of the application (should match the folder from the previous step)\n\n6. Update `requirements.yaml`\n\n    - `name` - the name of helm chart/image. This should match your git repo name\n    - `version` - the version number of the helm chart\n    - `repository` - the url to the helm repository\n    \n    If you are using Artifactory, you should have retrieved the `repository` value in the previous section.\n\n7. Update `values.yaml`\n \n    - Replace `<app-chart-name>` with the name of application\n    - Provide configuration values specific to the helm chart under the `<app-chart-name>` prefix\n\n    **Note:** The helm values will need to be prefixed with the helm chart name that was provided in the \n    previous step. For example, assuming the helm chart is `message-logger` the values.yaml file would look like the following:\n    ```yaml\n    message-logger:\n      replicaCount: 3\n    ``` \n   **Note:** The specific values that should be configured are dependent on the helm chart that is referenced\n   in the `requirements.yaml`. For the Starter Kits you can see those details and customize the chart by \n   looking in the `chart/{chart name}` of the repository.\n\n8. Repeat steps 4-7 for each application in the project\n\n#### Register the git repo in ArgoCD\n\nNow that the repository has been created, we need to tell ArgoCD where it is.\n\n1. Get the ArgoCD login information from the `igc credentials` cli command\n\n    **Note:** You need to be logged into the cluster on the command-line for the CLI to access the cluster information.\n\n2. Log into ArgoCD\n\n3. Click on the gear icon on the left menu to access the Settings options\n\n    ![ArgoCD config](/images/argocd-config.png)\n\n4. Select the `Repositories` option\n\n5. Click either the `Connect Repo using HTTPS` or `Connect Repo using SSH` button at the top and provide the information\nfor the Git repo.\n\n#### Create a project in ArgoCD (Optional)\n\nIn ArgoCD terms, each deployable component is an `Application` and applications are grouped into `Projects`. Projects are not \nrequired for ArgoCD to be able to deploy applications but it helps to organize applications and provide some restrictions\non what can be done for applications that make up a project.\n\nTo create a project, do the following:\n\n1. Log into ArgoCD\n\n2. Click on the gear icon on the left menu to access the Settings options\n\n    ![ArgoCD config](/images/argocd-config.png)\n\n3. Select the `Projects` option\n\n4. Click the `New Project` button at the top of the page.\n\n5. Provide the following values then press `Create`:\n\n    - `name` - provide the name for the project\n    - `description` - a brief description of the project\n    - `sources` - click `add source` and pick the Git repository from the list that was added previously\n    - `destinations` \n        - Add `https://kubernetes.default.svc` for the cluster url and `test-{initials}` for the namespace\n        - Add `https://kubernetes.default.svc` for the cluster url and `staging-{initials}` for the namespace\n\n    **Note:** Initially, the only cluster that is available is the one in which ArgoCD is - \n    `https://kubernetes.default.svc`. By adding the two destinations we have allowed the project to be deployed\n    to both the `test-{initials}` and `staging-{initials}` namespaces within the current cluster.\n\n#### Add an application in ArgoCD for each application component (helm chart) \n\nThe last step in the process is to define the application(s) within ArgoCD that should be managed. This consists of\nconnecting the config within the Git repo to the cluster and namespace.\n\n1. Log into ArgoCD\n\n2. Click `New Application` and provide the following values:\n\n    - `application name` - The name of the application. It is recommend to use the format of `{namespace}-{image name}`\n    - `project` - The project with which the application should be included\n    - `sync-policy` - The manner with which ArgoCD will use to manage the deployed artifacts. `Automatic` is \n    recommended\n    - `repository url` - The Git url where the configuration is stored\n    - `revision` - The branch where the configuration for this instance is stored\n    - `path` - The path within the repository where the application config is located (should be the application name)\n    - `destination cluster` - The cluster url for the deployment\n    - `destination namespace` - The namespace where the application should be deployed\n\n3. Repeat that step for each application and each environment\n\n### Hook the CI pipeline to the CD pipeline\n\nThe last stage in the CI pipeline updates the version number in the `requirements.yaml` to version of the helm chart\nthat was just built. In order for the pipeline to push the updated file into the GitOps repo, it needs to read the url\nand credentials from a Kubernetes secret named `gitops-cd-secret`.\n\nFortunately, a helm chart has been provided in the ArgoCD Starter Kit to help in the creation of the secret. The following\nsteps will walk through using the helm chart to create the secret.\n\n#### Create the `gitops-cd-secret`\n\n1. Log into the cluster on the command-line.\n\n2. Change the directory to the root of the ArgoCD Starter Kit repo that was cloned previously.\n\n3. Run `igc git-secret gitops-cd-secret -n dev-{initials}` to create the secret. This command will prompt for the username,\npersonal access token, and the branch to put in the secret.\n\n    **What just happened?**\n    \n    The `git-secret` command creates a secret in a kubernetes namespace containing the url, username, password, and branch information\n    for a git repo. In the command above, we provided `gitops-cd-secret` for the secret name. (If that value is left off the\n    secret name defaults to `{git org}.{git repo}`.) You can verify the secret was created by running: \n    \n    ```kubectl get secrets/gitops-cd-secret -n dev-{initials} -o yaml``` \n\n    **Note:** \n    \n    - For the secret to be available to the CI pipeline, the secret needs to be created in the same namespace\n    where the pipeline is running (e.g. `dev-{initials}`).\n    - The value provided for `branch` is the one the pipeline will use to when committing changes to trigger \n    the CD pipeline. `test` is the recommended value for the branch field.\n","type":"Mdx","contentDigest":"42a2ae142a4b92ba6e2f9ca707844c2f","counter":305,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Continuous Delivery"},"exports":{},"rawBody":"---\ntitle: Continuous Delivery\n---\n\n<PageDescription>\n\nUse ArgoCD to continuously deliver application changes into the runtime environment\n\n</PageDescription>\n\nIn IBM Garage Method, one of the Develop practices is [continuous delivery](https://www.ibm.com/garage/method/practices/deliver/practice_continuous_delivery/).\nThe Developer Tools environment uses an ArgoCD pipeline to automate continuous delivery.\n\n## What is continuous delivery\n\nContinuous delivery is the DevOps approach of continuously making new versions of a application components available\nfor deployment to an environment. The process involves automation of the build and validation process and concludes with\na new version of the application that is available for promotion to another environment.\n\nContinuous Delivery is closely related to Continuous Deployment with the only distinction being that in \nContinuous Deployment the new versions are automatically deployed into the next environment. In Continuous\nDelivery the automated deployment requires the deployment to be manually triggered.\n\n## What is Git Ops\n\n[GitOps](https://www.weave.works/technologies/gitops/) is the operational pattern of using Git repositories as the source of truth for\ndefining the configuration that makes up the desired state of the application.\n\n## Common tools\n\n### What is ArgoCD\n\n\"ArgoCD is a delarative, GitOps continuous delivery tools for Kubernetes\"\n\nIt supports defining kubernetes manifests in a number of ways:\n\n- kustomize\n- helm charts\n- ksonnet\n- jsonnet\n- plain directory of yaml/json manifests\n\nArgoCD synchronizes the application state with the desired state defined in Git and\nautomates the deployment of kubernetes resources to ensure they match.\n\n### Configuring GitOps with ArgoCD\n\nYou must have completed the [ArgoCD Setup](/getting-started/argocd-setup) before continuing.\n\n**Terminology:**\n\nArgoCD uses a number of terms to refer to the components\n\n- `Application` - a deployable unit\n\n    In the context of the Dev Tools, that will map to one helm chart that contains one container image \n    that was produced by one CI pipeline. While helm charts and images could certainly be combined to\n    make more sophisticated applications in more advanced scenarios, we will be using this simple definition\n    here.\n    \n- `Project` - a collection of applications that make up a solution\n\n#### Find the url to the Artifactory helm repository\n\nAssuming a build has already completed successfully and published the result to Artifactory then use the following steps:\n\n1. Open the Artifactory dashboard from the [Developer Tools Dashboard](/getting-started/dashboard) and login\n\n2. Select `Artifacts` from the left nav menu\n\n3. In the `Artifact Repository Browser`, expand the `generic-local` folder and the folder beneath it.\n\n4. Click on the `index.yaml` file\n\n5. In the details pane on the right, right-click on the `Download` link and copy the link address.\n\n6. Open a text editor and paste the link address value into it. The helm repository url should be the value \nexcluding `index.yaml` \n\n    For example, for `https://artifactory.test.com/artifactory/generic-local/test/index.yaml` the helm repository\n    url would be `https://artifactory.test.com/artifactory/generic-local/test`\n\n#### Setup the GitOps repo\n\nArgoCD uses a Git repo to express the desired state of the Kubernetes environment. We recommend using\none repository to represent one `project`. Within that repository we will have a separate folder for \neach `application` that will be part of the `project`. The repository will also contain a branch for \neach environment/namespace into which we want to deploy the applications.\n\n1. Create a new repo from the ArgoCD Starter Kit template - https://github.com/ibm-garage-cloud/template-argocd-test/generate\n\n2. Clone the project to your machine\n\n3. Create a branch named `test` to configure the values for deployment to the `test` environment\n\n    ```bash\n    git checkout -b test\n    ```\n\n4. The repository contains a template helm chart in the `app-artifactory` folder. Copy that folder and rename it to match one of \nthe application names in your project.\n\n   The application name should match the repository name if the CI pipeline is going push changes to the \n   CD pipeline.\n\n5. Update `Chart.yaml`\n\n   - `name` - the name of the application (should match the folder from the previous step)\n\n6. Update `requirements.yaml`\n\n    - `name` - the name of helm chart/image. This should match your git repo name\n    - `version` - the version number of the helm chart\n    - `repository` - the url to the helm repository\n    \n    If you are using Artifactory, you should have retrieved the `repository` value in the previous section.\n\n7. Update `values.yaml`\n \n    - Replace `<app-chart-name>` with the name of application\n    - Provide configuration values specific to the helm chart under the `<app-chart-name>` prefix\n\n    **Note:** The helm values will need to be prefixed with the helm chart name that was provided in the \n    previous step. For example, assuming the helm chart is `message-logger` the values.yaml file would look like the following:\n    ```yaml\n    message-logger:\n      replicaCount: 3\n    ``` \n   **Note:** The specific values that should be configured are dependent on the helm chart that is referenced\n   in the `requirements.yaml`. For the Starter Kits you can see those details and customize the chart by \n   looking in the `chart/{chart name}` of the repository.\n\n8. Repeat steps 4-7 for each application in the project\n\n#### Register the git repo in ArgoCD\n\nNow that the repository has been created, we need to tell ArgoCD where it is.\n\n1. Get the ArgoCD login information from the `igc credentials` cli command\n\n    **Note:** You need to be logged into the cluster on the command-line for the CLI to access the cluster information.\n\n2. Log into ArgoCD\n\n3. Click on the gear icon on the left menu to access the Settings options\n\n    ![ArgoCD config](/images/argocd-config.png)\n\n4. Select the `Repositories` option\n\n5. Click either the `Connect Repo using HTTPS` or `Connect Repo using SSH` button at the top and provide the information\nfor the Git repo.\n\n#### Create a project in ArgoCD (Optional)\n\nIn ArgoCD terms, each deployable component is an `Application` and applications are grouped into `Projects`. Projects are not \nrequired for ArgoCD to be able to deploy applications but it helps to organize applications and provide some restrictions\non what can be done for applications that make up a project.\n\nTo create a project, do the following:\n\n1. Log into ArgoCD\n\n2. Click on the gear icon on the left menu to access the Settings options\n\n    ![ArgoCD config](/images/argocd-config.png)\n\n3. Select the `Projects` option\n\n4. Click the `New Project` button at the top of the page.\n\n5. Provide the following values then press `Create`:\n\n    - `name` - provide the name for the project\n    - `description` - a brief description of the project\n    - `sources` - click `add source` and pick the Git repository from the list that was added previously\n    - `destinations` \n        - Add `https://kubernetes.default.svc` for the cluster url and `test-{initials}` for the namespace\n        - Add `https://kubernetes.default.svc` for the cluster url and `staging-{initials}` for the namespace\n\n    **Note:** Initially, the only cluster that is available is the one in which ArgoCD is - \n    `https://kubernetes.default.svc`. By adding the two destinations we have allowed the project to be deployed\n    to both the `test-{initials}` and `staging-{initials}` namespaces within the current cluster.\n\n#### Add an application in ArgoCD for each application component (helm chart) \n\nThe last step in the process is to define the application(s) within ArgoCD that should be managed. This consists of\nconnecting the config within the Git repo to the cluster and namespace.\n\n1. Log into ArgoCD\n\n2. Click `New Application` and provide the following values:\n\n    - `application name` - The name of the application. It is recommend to use the format of `{namespace}-{image name}`\n    - `project` - The project with which the application should be included\n    - `sync-policy` - The manner with which ArgoCD will use to manage the deployed artifacts. `Automatic` is \n    recommended\n    - `repository url` - The Git url where the configuration is stored\n    - `revision` - The branch where the configuration for this instance is stored\n    - `path` - The path within the repository where the application config is located (should be the application name)\n    - `destination cluster` - The cluster url for the deployment\n    - `destination namespace` - The namespace where the application should be deployed\n\n3. Repeat that step for each application and each environment\n\n### Hook the CI pipeline to the CD pipeline\n\nThe last stage in the CI pipeline updates the version number in the `requirements.yaml` to version of the helm chart\nthat was just built. In order for the pipeline to push the updated file into the GitOps repo, it needs to read the url\nand credentials from a Kubernetes secret named `gitops-cd-secret`.\n\nFortunately, a helm chart has been provided in the ArgoCD Starter Kit to help in the creation of the secret. The following\nsteps will walk through using the helm chart to create the secret.\n\n#### Create the `gitops-cd-secret`\n\n1. Log into the cluster on the command-line.\n\n2. Change the directory to the root of the ArgoCD Starter Kit repo that was cloned previously.\n\n3. Run `igc git-secret gitops-cd-secret -n dev-{initials}` to create the secret. This command will prompt for the username,\npersonal access token, and the branch to put in the secret.\n\n    **What just happened?**\n    \n    The `git-secret` command creates a secret in a kubernetes namespace containing the url, username, password, and branch information\n    for a git repo. In the command above, we provided `gitops-cd-secret` for the secret name. (If that value is left off the\n    secret name defaults to `{git org}.{git repo}`.) You can verify the secret was created by running: \n    \n    ```kubectl get secrets/gitops-cd-secret -n dev-{initials} -o yaml``` \n\n    **Note:** \n    \n    - For the secret to be available to the CI pipeline, the secret needs to be created in the same namespace\n    where the pipeline is running (e.g. `dev-{initials}`).\n    - The value provided for `branch` is the one the pipeline will use to when committing changes to trigger \n    the CD pipeline. `test` is the recommended value for the branch field.\n","fileAbsolutePath":"/Users/mjperrins/projects/cat/guide/src/pages/guides/continuous-delivery/index.mdx"}}}}