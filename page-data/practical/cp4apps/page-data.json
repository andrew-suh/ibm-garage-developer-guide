{"componentChunkName":"component---src-pages-practical-cp-4-apps-index-mdx","path":"/practical/cp4apps/","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"New Cloud Native Apps with IBM Cloud for Applications"},"relativePagePath":"/practical/cp4apps/index.mdx","titleType":"page","MdxNode":{"id":"7089d5a2-054d-584e-9643-c1e8c0ba8848","children":[],"parent":"f2e55ee8-0282-5a46-88be-e5d8e2fd9b51","internal":{"content":"---\ntitle: New Cloud Native Apps with IBM Cloud for Applications\n---\n\n\n<PageDescription>\n\nUse IBM Cloud Pak for Applications for build new Cloud Native Applications\n\n</PageDescription>\n\nThis guide assumes that the environment is already setup for your cluster.\n\n<AnchorLinks>\n  <AnchorLink to=\"#cp4apps-dashboard\">CP4Apps Dashboard</AnchorLink>\n  <AnchorLink to=\"#cp4apps-dev-tools\">CP4Apps Dev Tools</AnchorLink>\n  <AnchorLink to=\"#new-apps-with-appsody-cli\">New Apps with Apppsody CLI</AnchorLink>\n  <AnchorLink to=\"#new-apps-with-codewind\">New Apps with CodeWind</AnchorLink>\n  <AnchorLink to=\"#build-apps-with-tekton-pipelines\">Build Apps with Tekton Pipelines</AnchorLink>\n  <AnchorLink to=\"#scale-to-zero-serverless\">Scale to zero with Serverless</AnchorLink>\n</AnchorLinks>\n\n\n## CP4Apps Dashboard\n\nOpen the OpenShift Console and select `Cloud Pack for Applications` from the App Launcher\n\n![CP4Apps Launcher](images/icp4apps-launcher.png)\n\nExplore the `Instances`, `Docs`, and `Guides` from the landing page.\n\n![CP4Apps Landing](images/icp4apps-landing.png)\n\n\n## CP4Apps Dev Tools\n\nThe CP4Apps dashboard provides instructions and links to setup the dev tools.\n\nGo to the section `Let's get started!` and click `Setup Dev Tools`\n\n![Setup CP4Apps Dev Tools](images/icp4apps-devtools.png)\n\nCP4Apps provides desktop development tools that work with VS Code and Eclipse IDEs, as well as a command line tool you can use with or without the IDEs.\n\nIf using VS Code IDE:\n- Install [Codewind from the VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=IBM.codewind)\n\nIf using Eclipse IDE:\n- Install [Codewind from the Eclipse Marketplace](https://marketplace.eclipse.org/content/codewind)\n\nInstall [Appsody CLI](https://appsody.dev/docs/getting-started/installation)\n\n\n## New Apps with Appsody CLI\n\n\nAdd the Collection Hub specific to your Kabanero Enterprise Instance in the cluster.\n\nGo to the Instance view on the CP4Apps dashboard and copy the Appsody URL.\n\nRun the following command to add a repository to your local appsody CLI configuration.\n\n```\nappsody repo add kabanero-0.2.1 https://github.com/kabanero-io/collections/releases/download/0.2.1/kabanero-index.yaml\n```\n\nSet the new repo added as default, you will notice it will have a `*` in front\n\n```\nappsody repo set-default kabanero-0.2.1\nappsody repo list\n```\n\nHere is the output:\n```\nNAME                    URL                                                                                            \n*kabanero-0.2.1         https://github.com/kabanero-io/collections/releases/download/0.2.1/kabanero-index.yaml         \nincubator               https://github.com/appsody/stacks/releases/latest/download/incubator-index.yaml                \n```\n\nRun the following command to list the applications stacks allowed to be used:\n```\nappsody list kabanero-0.2.1\n```\n\nHere is the output\n```\nREPO            ID                      VERSION         TEMPLATES               DESCRIPTION                                              \nkabanero-0.2.1  java-microprofile       0.2.18          *default                Eclipse MicroProfile on Open Liberty & OpenJ9 using Maven\nkabanero-0.2.1  java-spring-boot2       0.3.15          *default, kotlin        Spring Boot using OpenJ9 and Maven                       \nkabanero-0.2.1  nodejs                  0.2.5           *simple                 Runtime for Node.js applications                         \nkabanero-0.2.1  nodejs-express          0.2.7           scaffold, *simple       Express web framework for Node.js                        \nkabanero-0.2.1  nodejs-loopback         0.1.5           *scaffold               LoopBack 4 API Framework for Node.js  \n```\n\nCreate an empty directory that will contain the project:\n```\nmkdir -p ~/projects/nodejs-express-$initials\ncd ~/projects/nodejs-express-$initials\n```\n\nRun the command to initialize the project\n```\nappsody init kabanero-0.2.1/nodejs-express\n```\n\nTo run the application you don't need to have node.js or java sdk in your workstation, the application will run from a container that has all the tools included.\nRun the command to start the Application\n```\nappsody run\n```\n\nEdit a file in the application with any editor, for example `app.js`.\nChange the response to `Hello Garage`.\nYou will notice that the change is detected and the application automatically restarted.\nEach stack comes with a set of instrumentation you can access them with the following endpoints.\n- Application endpoint: http://localhost:3000/\n- Health endpoint: http://localhost:3000/health\n- Liveness endpoint: http://localhost:3000/live\n- Readiness endpoint: http://localhost:3000/ready\n- Metrics endpoint: http://localhost:3000/metrics\n- Dashboard endpoint: http://localhost:3000/appmetrics-dash (development only)\n\nIn a different terminal chagen to the application directory and run the following command to stop the application\n```\nappsody stop\n```\n\n## New Apps with CodeWind\n\n\nConfigure Codewind to point at your Kabanero Collection Hub. \nGet your Collection Hub URL from your team instance page.\n\nTo set your Collection Hub URL, follow the instructions associated with the tool you are using:\n\n- Eclipse\n  - See [Configuring template sources for Eclipse](https://www.eclipse.org/codewind/mdteclipseusingadifferenttemplate.html)\n- VS Code\n  - See [Configuring template sources for VS Code](https://www.eclipse.org/codewind/mdt-vsc-usingadifferenttemplate.html)\n\n\nTo create a new CodeWind Application using a application stack allowed by our Kabanero Enterprise instance, click on `Projects (Local)`, then select `New Project`\nSelect the template `Kabanero Node.js Express simple template (Appsody Stacks - kabanero-0.2.1)` from the list, then provide a name like `nodejs-express-$initials`\n\nThe application will start, to work with the source code, right click on `Projects` and select `Open CodeWind Workspace`.\n\nWith the application in running state, explore the following options, right click on the application in the CodeWind view.\n- Open App\n- Open Project Overview, verify the ports and status\n- Open Container Shell, explore the filesystem\n- Open Application Monitor, use the application and see the traffic metrics\n- Open Performance Dashboard and run a load test, see the traffic metrics\n- Restart in Debug mode, insert a break point in `app.js` and run the app to stop the application in debug view.\n\n![CodeWind Options](images/codewind.png)\n\n## Build Apps with Tekton Pipelines\n\n\n### Setup namespace\n\nCreat a new namespace `dev-$initials` if not already created\n```\noc new-project dev-$initials\n```\n\nChange context to your namespace\n```\noc project dev-$intials\n```\n\nVerify namespace context\n```\noc projet -q\n```\n\n\n### Create the Git Webhook\n\nCreate a Github repository using your corresponding mooc organization and use your initials to make your repository unique.\nFor example `https://github.com/mooc-team-one/nodejs-express-cs.git`\n\nCreate a Git Webhook, open the Tekton Dashboard from the Instance view in the ICP4Apps Dashboard.\n\nThen click on Webhooks menu on the Tekton Dashboard.\n\nThen click `Add Webhook`\n\nEnter the following values on the form.\n\n- Name: `nodejs-express-$intials` like `nodejs-express-cs`\n- Repository URL: `https://github.com/mooc-team-$id/nodejs-express-$initials.git` like `https://github.com/mooc-team-one/nodejs-express-cs.git`\n- Access Token: \n  - Select from the list: `github.com-mooc-access-token` no need to create a new access token.\n- Namespace: \n  - Select `kabanero`, not your own namespace.\n- Pipeline: `nodejs-express-build-deploy-pipeline-fix` the one with prefix `-fix`\n- Service Account: `kabanero-operator`\n- Docker Registry: `docker-registry.default.svc:5000/dev-$initials` the `dev-$initials` is your namespace, like `docker-registry.default.svc:5000/dev-cs` \n\n![Create Webhook](images/create-webhook2.png)\n\n### Setup git repository for deployment\n\nRun the following command, to generate the manifest\n```\nappsody deploy --generate-only \n```\nThis command generated the following file `app-deploy.yaml`\n\nEdit the file `app-deploy.yaml`.\n\nSpecify namespace to deploy application in your case `dev-$initials`\n```\nmetadata:\n  namespace: dev-$initials\n```\n\nChecking all the files:\n```\ngit init\ngit add .\ngit commit -m \"first commit\"\n```\n\nAdd the remote repo url and push\n```\ngit remote add origin git@github.com:mooc-team-$id/nodejs-express-$initials.git\ngit push -u origin master\n```\n\nSelect `PipelineRuns` in the Tekton UI to see the progress on the pipelines\n\n![PipelineRuns](images/pipelinerun-starts.png)\n\n## Scale to zero (Serverless)\n\nEdit the `app-deploy.yaml` and set the variable `createKnativeService` to `true`\n\n```yaml\nspec:\n  createKnativeService: true\n```\n\nPush the change to git:\n```\ngit add app-deploy.yaml\ngit commit -m \"make it serverless\"\ngit push origin\n```\n\nWhen the tekton pipeline is done, get the URL of the Knative Service with the following command:\n```\noc get ksvc\n```\n\nThe output should look like this:\n```\nNAME                URL                                                                                                                               LATESTCREATED             LATESTREADY               READY   REASON\nnodejs-express-cs   http://nodejs-express-cs.dev-cs.mooc-surge-ocp-cluster-0143c5dd31acd8e030a1d6e0ab1380e3-0001.us-east.containers.appdomain.cloud   nodejs-express-cs-gfvfz   nodejs-express-cs-gfvfz   True    \n```","type":"Mdx","contentDigest":"dd4dd02ce9f832115262735e2041d3d5","counter":392,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"New Cloud Native Apps with IBM Cloud for Applications"},"exports":{},"rawBody":"---\ntitle: New Cloud Native Apps with IBM Cloud for Applications\n---\n\n\n<PageDescription>\n\nUse IBM Cloud Pak for Applications for build new Cloud Native Applications\n\n</PageDescription>\n\nThis guide assumes that the environment is already setup for your cluster.\n\n<AnchorLinks>\n  <AnchorLink to=\"#cp4apps-dashboard\">CP4Apps Dashboard</AnchorLink>\n  <AnchorLink to=\"#cp4apps-dev-tools\">CP4Apps Dev Tools</AnchorLink>\n  <AnchorLink to=\"#new-apps-with-appsody-cli\">New Apps with Apppsody CLI</AnchorLink>\n  <AnchorLink to=\"#new-apps-with-codewind\">New Apps with CodeWind</AnchorLink>\n  <AnchorLink to=\"#build-apps-with-tekton-pipelines\">Build Apps with Tekton Pipelines</AnchorLink>\n  <AnchorLink to=\"#scale-to-zero-serverless\">Scale to zero with Serverless</AnchorLink>\n</AnchorLinks>\n\n\n## CP4Apps Dashboard\n\nOpen the OpenShift Console and select `Cloud Pack for Applications` from the App Launcher\n\n![CP4Apps Launcher](images/icp4apps-launcher.png)\n\nExplore the `Instances`, `Docs`, and `Guides` from the landing page.\n\n![CP4Apps Landing](images/icp4apps-landing.png)\n\n\n## CP4Apps Dev Tools\n\nThe CP4Apps dashboard provides instructions and links to setup the dev tools.\n\nGo to the section `Let's get started!` and click `Setup Dev Tools`\n\n![Setup CP4Apps Dev Tools](images/icp4apps-devtools.png)\n\nCP4Apps provides desktop development tools that work with VS Code and Eclipse IDEs, as well as a command line tool you can use with or without the IDEs.\n\nIf using VS Code IDE:\n- Install [Codewind from the VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=IBM.codewind)\n\nIf using Eclipse IDE:\n- Install [Codewind from the Eclipse Marketplace](https://marketplace.eclipse.org/content/codewind)\n\nInstall [Appsody CLI](https://appsody.dev/docs/getting-started/installation)\n\n\n## New Apps with Appsody CLI\n\n\nAdd the Collection Hub specific to your Kabanero Enterprise Instance in the cluster.\n\nGo to the Instance view on the CP4Apps dashboard and copy the Appsody URL.\n\nRun the following command to add a repository to your local appsody CLI configuration.\n\n```\nappsody repo add kabanero-0.2.1 https://github.com/kabanero-io/collections/releases/download/0.2.1/kabanero-index.yaml\n```\n\nSet the new repo added as default, you will notice it will have a `*` in front\n\n```\nappsody repo set-default kabanero-0.2.1\nappsody repo list\n```\n\nHere is the output:\n```\nNAME                    URL                                                                                            \n*kabanero-0.2.1         https://github.com/kabanero-io/collections/releases/download/0.2.1/kabanero-index.yaml         \nincubator               https://github.com/appsody/stacks/releases/latest/download/incubator-index.yaml                \n```\n\nRun the following command to list the applications stacks allowed to be used:\n```\nappsody list kabanero-0.2.1\n```\n\nHere is the output\n```\nREPO            ID                      VERSION         TEMPLATES               DESCRIPTION                                              \nkabanero-0.2.1  java-microprofile       0.2.18          *default                Eclipse MicroProfile on Open Liberty & OpenJ9 using Maven\nkabanero-0.2.1  java-spring-boot2       0.3.15          *default, kotlin        Spring Boot using OpenJ9 and Maven                       \nkabanero-0.2.1  nodejs                  0.2.5           *simple                 Runtime for Node.js applications                         \nkabanero-0.2.1  nodejs-express          0.2.7           scaffold, *simple       Express web framework for Node.js                        \nkabanero-0.2.1  nodejs-loopback         0.1.5           *scaffold               LoopBack 4 API Framework for Node.js  \n```\n\nCreate an empty directory that will contain the project:\n```\nmkdir -p ~/projects/nodejs-express-$initials\ncd ~/projects/nodejs-express-$initials\n```\n\nRun the command to initialize the project\n```\nappsody init kabanero-0.2.1/nodejs-express\n```\n\nTo run the application you don't need to have node.js or java sdk in your workstation, the application will run from a container that has all the tools included.\nRun the command to start the Application\n```\nappsody run\n```\n\nEdit a file in the application with any editor, for example `app.js`.\nChange the response to `Hello Garage`.\nYou will notice that the change is detected and the application automatically restarted.\nEach stack comes with a set of instrumentation you can access them with the following endpoints.\n- Application endpoint: http://localhost:3000/\n- Health endpoint: http://localhost:3000/health\n- Liveness endpoint: http://localhost:3000/live\n- Readiness endpoint: http://localhost:3000/ready\n- Metrics endpoint: http://localhost:3000/metrics\n- Dashboard endpoint: http://localhost:3000/appmetrics-dash (development only)\n\nIn a different terminal chagen to the application directory and run the following command to stop the application\n```\nappsody stop\n```\n\n## New Apps with CodeWind\n\n\nConfigure Codewind to point at your Kabanero Collection Hub. \nGet your Collection Hub URL from your team instance page.\n\nTo set your Collection Hub URL, follow the instructions associated with the tool you are using:\n\n- Eclipse\n  - See [Configuring template sources for Eclipse](https://www.eclipse.org/codewind/mdteclipseusingadifferenttemplate.html)\n- VS Code\n  - See [Configuring template sources for VS Code](https://www.eclipse.org/codewind/mdt-vsc-usingadifferenttemplate.html)\n\n\nTo create a new CodeWind Application using a application stack allowed by our Kabanero Enterprise instance, click on `Projects (Local)`, then select `New Project`\nSelect the template `Kabanero Node.js Express simple template (Appsody Stacks - kabanero-0.2.1)` from the list, then provide a name like `nodejs-express-$initials`\n\nThe application will start, to work with the source code, right click on `Projects` and select `Open CodeWind Workspace`.\n\nWith the application in running state, explore the following options, right click on the application in the CodeWind view.\n- Open App\n- Open Project Overview, verify the ports and status\n- Open Container Shell, explore the filesystem\n- Open Application Monitor, use the application and see the traffic metrics\n- Open Performance Dashboard and run a load test, see the traffic metrics\n- Restart in Debug mode, insert a break point in `app.js` and run the app to stop the application in debug view.\n\n![CodeWind Options](images/codewind.png)\n\n## Build Apps with Tekton Pipelines\n\n\n### Setup namespace\n\nCreat a new namespace `dev-$initials` if not already created\n```\noc new-project dev-$initials\n```\n\nChange context to your namespace\n```\noc project dev-$intials\n```\n\nVerify namespace context\n```\noc projet -q\n```\n\n\n### Create the Git Webhook\n\nCreate a Github repository using your corresponding mooc organization and use your initials to make your repository unique.\nFor example `https://github.com/mooc-team-one/nodejs-express-cs.git`\n\nCreate a Git Webhook, open the Tekton Dashboard from the Instance view in the ICP4Apps Dashboard.\n\nThen click on Webhooks menu on the Tekton Dashboard.\n\nThen click `Add Webhook`\n\nEnter the following values on the form.\n\n- Name: `nodejs-express-$intials` like `nodejs-express-cs`\n- Repository URL: `https://github.com/mooc-team-$id/nodejs-express-$initials.git` like `https://github.com/mooc-team-one/nodejs-express-cs.git`\n- Access Token: \n  - Select from the list: `github.com-mooc-access-token` no need to create a new access token.\n- Namespace: \n  - Select `kabanero`, not your own namespace.\n- Pipeline: `nodejs-express-build-deploy-pipeline-fix` the one with prefix `-fix`\n- Service Account: `kabanero-operator`\n- Docker Registry: `docker-registry.default.svc:5000/dev-$initials` the `dev-$initials` is your namespace, like `docker-registry.default.svc:5000/dev-cs` \n\n![Create Webhook](images/create-webhook2.png)\n\n### Setup git repository for deployment\n\nRun the following command, to generate the manifest\n```\nappsody deploy --generate-only \n```\nThis command generated the following file `app-deploy.yaml`\n\nEdit the file `app-deploy.yaml`.\n\nSpecify namespace to deploy application in your case `dev-$initials`\n```\nmetadata:\n  namespace: dev-$initials\n```\n\nChecking all the files:\n```\ngit init\ngit add .\ngit commit -m \"first commit\"\n```\n\nAdd the remote repo url and push\n```\ngit remote add origin git@github.com:mooc-team-$id/nodejs-express-$initials.git\ngit push -u origin master\n```\n\nSelect `PipelineRuns` in the Tekton UI to see the progress on the pipelines\n\n![PipelineRuns](images/pipelinerun-starts.png)\n\n## Scale to zero (Serverless)\n\nEdit the `app-deploy.yaml` and set the variable `createKnativeService` to `true`\n\n```yaml\nspec:\n  createKnativeService: true\n```\n\nPush the change to git:\n```\ngit add app-deploy.yaml\ngit commit -m \"make it serverless\"\ngit push origin\n```\n\nWhen the tekton pipeline is done, get the URL of the Knative Service with the following command:\n```\noc get ksvc\n```\n\nThe output should look like this:\n```\nNAME                URL                                                                                                                               LATESTCREATED             LATESTREADY               READY   REASON\nnodejs-express-cs   http://nodejs-express-cs.dev-cs.mooc-surge-ocp-cluster-0143c5dd31acd8e030a1d6e0ab1380e3-0001.us-east.containers.appdomain.cloud   nodejs-express-cs-gfvfz   nodejs-express-cs-gfvfz   True    \n```","fileAbsolutePath":"/Users/mjperrins/projects/cat/guide/src/pages/practical/cp4apps/index.mdx"}}}}