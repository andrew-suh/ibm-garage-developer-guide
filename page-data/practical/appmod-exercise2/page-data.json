{"componentChunkName":"component---src-pages-practical-appmod-exercise-2-index-mdx","path":"/practical/appmod-exercise2/","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"Application Modernization - Exercise 2"},"relativePagePath":"/practical/appmod-exercise2/index.mdx","titleType":"page","MdxNode":{"id":"5b45e34c-ae8e-5a9b-a78d-ce224a1732d3","children":[],"parent":"298e5e44-c209-5381-adb0-2e8071caf741","internal":{"content":"---\ntitle: Application Modernization - Exercise 2\n---\n\n<PageDescription>\n\nAn example of a \"minimum code changes\" modernization of an existing traditional WebSphere ND application to Liberty running in a Docker Container.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink to=\"#environment-setup\">Environment Setup</AnchorLink>\n  <AnchorLink to=\"#analyze-the-scan-results\">Analyze the Scan Results</AnchorLink>\n  <AnchorLink to=\"#make-the-code-changes\">Make the code changes</AnchorLink>\n  <AnchorLink to=\"#run-the-modified-application\">Run the modified Application</AnchorLink>\n</AnchorLinks>\n\n## Business Need\n\nJust as with Application Modernization Exercise 1, Exercise 2 is an example of `runtime modernization` which doesn't address the technical debt in the application but does remove the technical debt provided by the Application Server itself. In this exercise you will learn the skills to make minor code changes to applications to move them from traditional WebSphere ND to \"the Cloud\". While this isn't the typical way that the Garage wants to engage with customers, it is going to be part of the overall modernization of their legacy Java portfolio and an important skill for you to have. You will use tools such as IBM Cloud Transformation Advisor and the Eclipse based WebSphere Migration Toolkit.\n\n## [MVP Statement](https://www.ibm.com/garage/method/practices/think/practice_minimum_viable_product/)\n\n- **Who:** Operations teams are tasked with moving from traditional WebSphere ND to \"the Cloud\" and have access to developers to make some minor changes to legacy Java applications to move them to the Cloud.\n\n- **What:** This application is used by a small number of customers and will be replaced in 18 months with a new version. The operations team needs to move to \"the Cloud\" now and wants to standardize on Docker containers that they can run anywhere.\n\n- **Wow:** With a few simple steps you can move an application and the associated configuration to a Liberty runtime in a Docker container with some minor code changes. This is something that can be repeated over and over in a factory type engagement.\n\n## [Architecture]()\n\nCustomer Order Services is a simple legacy monolith with a backend database (DB2).\n\n## Technical Requirements\n- This modernization exercise has the following requirements:\n\n    - Minor code changes\n    - The target is to get the application running on Liberty in a Docker container on your laptop\n    - The DB2 database will remain in it's current location (it is deployed in a container in the MOOC4 cluster exposed with a NodePort)\n\n## Guide\n- This exercise has the following steps\n\n    - Import provided scan results in to IBM Cloud Transformation Advisor running in your MOOC Red Hat OpenShift cluster.\n    - Review the IBM Cloud Transformation Advisor analysis\n    - Load the application source code in to Eclipse\n    - Use the WebSphere Migration Toolkit to support simple code changes\n    - Configure WebSphere Liberty to run the Application\n    - Unit Test and fix the Application\n\n## Solution Links\n\n### Environment Setup\n\n#### Install WebSphere Liberty Tools\n\n- Validate that you have JDK 8 (which is typically found in `/Library/Java/JavaVirtualMachines/`)\n\n    - If you don't have JDK 8 you can get it from here: https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n\n- Download Liberty from here: https://developer.ibm.com/wasdev/downloads/#asset/runtimes-wlp-javaee8\n\n- Install Eclipse from here: https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2019-09/R/eclipse-jee-2019-09-R-macosx-cocoa-x86_64.dmg\n\n- Use the `Eclipse Marketplace` to install `IBM WebSphere Application Server Migration Toolkit` and `IBM Liberty Development Tools 19.0.0.9` and restart Eclipse\n\n### Analyze the Scan Results\nIn this section you will upload the results from the IBM Cloud Transformation Advisor Data Collector to the IBM Cloud Transformation Advisor UI and analyze the findings.\n\n- Using your `IBM Garage for Cloud - Development Cluster Dashboard`, navigate to `Transformation Advisor`\n\n    ![apps](images/ta-dashboard.jpg)\n\n- You may receive an `Authentication endpoint is broken at the moment.` message. Copy the `URL` to a new `incognito` browser session to solve the problem\n\n- Use your existing workspace named `AppMod_{your initials}`\n\n- Add a new Collection named `Lab2`\n\nIn AppMod Exercise 1 you cloned the https://github.com/ibm-cloud-architecture/icp-dev-workshop.git repository. In the `lab5` folder you will find a `lab5.zip` file that contains the IBM Cloud Transformation Advisor Data Collector results.\n\n- Click `Upload data` and provide `lab5.zip`. After a few moments the results will be displayed as shown below:\n\n    ![ta](images/ta1.jpg)\n\n- Click on the `CustomerOrderServicesApp.ear` and review the detailed results. Review the `severe` results and use the `Analysis` report to locate the files you'll need to change.\n\n### Make the code changes\n\n#### Download the application code and import it into Eclipse\n\n- Clone the repository to your machine\n\n    ```bash\n    git clone https://github.com/ibm-cloud-architecture/refarch-jee-customerorder.git\n    ```\n\n- Checkout the source code:\n\n    ```bash\n    cd refarch-jee-customerorder\n    git checkout was70-dev\n    ```\n\n- Open eclipse, create a workspace and close the `Welcome` screen\n\n- In the `Servers` view, create a new Server\n\n- Select `IBM --> Liberty Server` and click Next\n\n  ![import](images/server.jpg)\n\n- Select `install from an archive or a repository` and then select a `JDK 8` for the `JRE` and click Next.\n\n  ![import](images/serverInstallFromArchive.jpg)\n\n- Enter the desired destination path, and point to the liberty zip you downloaded earlier in the `Install a new runtime environment from an archive:` section and click next.\n(you can also select `Download and install a new runtme environment from ibm.com` and select `WAS Liberty with Java EE 8 Full Platform` if you have not downloaded the Liberty zip yet)\n\n  ![import](images/serverDestinationPath.jpg)\n\n- In the Install Additional Content page, select the `Java EE 8 Full Platform Bundle` and click Next\n\n  ![import](images/serverBundle.jpg)\n\n- Click 'New...` to create a new server and change the `Server Name` to `Lab5` and then click Finish\n\n  ![import](images/server2.jpg)\n\n- Import the existing projects by:\n   * Clicking `File > Import`.\n   * In the `General folder`, click `Existing Projects into Workspace`.\n   * Click `Next`.\n   * In the `Select root directory field`, enter the location that you cloned the repository to such as `/lab5/refarch-jee-customerorder` and click `Browse`.\n   * Click `Finish`\n\n   ![import](images/import.jpg)\n\n   * In the Workspace Migration window, click `Cancel`. In the migration cancel window, click `OK`.\n\n#### Clean up the development environment\nWhen you create a Liberty development environment, you might need to fix installation paths and development tool versions that differ from the original development environment. When you imported the project to Eclipse, any errors were highlighted with red error marks.\n\n![import](images/eclipse1.jpg)\n\n- To view the problems in your workspace, click `Window > Show View > Other > General > Problems`. Click `OK`.\n\nErrors are shown for each of the projects that are related to the build path. In the projects for the new development environment, you need to update the references to the Java and WebSphere libraries which can be done automatically by setting the `Target Runtime`\n\n- Fix the targeted runtime for the application using these steps:\n\n    * Right-click on `CustomerOrderServicesApp` and click Properties.\n\n    * In the Properties window, click `Targeted Runtimes`\n\n    * De-select `WebSphere Application Server traditional V7.0`\n\n    * Select `Liberty Runtime`\n\n    * Click `Apply and Close`\n\n  ![libraries](images/targetruntime.jpg)\n\n- After updating the target runtime, clean and rebuild the entire workspace by clicking `Project > Clean`. Make sure that Clean all projects is selected and click `OK`.\n\n- Look at the Problems view again:\n\n    ![libraries](images/problems1.jpg)\n\n- You resolved several problems, but a few problems still exist. In this case, you want to fix the Xpath is invalid error. To fix that error:\n\n    * Right-click the `CustomerOrderServicesWeb` project and click `Properties`.\n\n    * In the properties window, click `Validation`\n\n    * Scroll to the `XSL Validator` and clear the `Manual` and `Build` options.\n\n    * Click `Apply and Close`.\n\n    ![validation](images/validation.jpg)\n\n- Clean and rebuild the entire workspace\n\n- Look at the Problems view again:\n\n- Now the projects have built without problems.\n\n#### Configure the Software Analyzer\nIn this task, you configure the Software Analyzer that is part of the WebSphere Application Server Migration Toolkit.\n\n- In your Eclipse environment, click Run > Analysis. The Software Analyzer opens.\n\n- Right-click Software Analyzer and select New. Type a name for the new configuration and click the Rules tab for the configuration.\n\n- From the Rule Set menu, select WebSphere Application Server Version Migration and click Set. The \"Rule set configuration\" window opens.\n\n    ![wink](images/analyzer1.jpg)\n\n- Configure the settings so that the appropriate rules, based on your migration requirements, are applied when your applications are analyzed.\n\n    ![wink](images/analyzer2.jpg)\n\n- When you're finished, click OK.\n\n#### Run the Software Analyzer\n- Click Analyze. After you run the Software Analyzer, the Software Analyzer Results tab is shown. The Software Analyzer rules and any errors and warnings are sorted in four categories: Java Code Review, XML File Review, JSP Code Review and File Review. Review each of the categories to determine whether code or configuration changes might be needed.\n\n  ![wink](images/analysis1a.jpg)\n\n- Click the File Review tab. The tab is empty\n\n- Click the Java Code Review tab. Warnings are shown for these aspects the WebSphere Application Migration Toolkit:\n\n  ![javacode](images/javacode.jpg)\n\n  Let's start with the warning about the default initalContext JNDI properties. View the information about the rule that flagged each error or warning by clicking Help > Show Contextual Help.\n\n  To understand more about the problem, click it and read the Help information.\n\n  Tip: If you need more information, click the detailed help link:\n\n  ![help](images/help.jpg)\n\n- When you understand what the problem is, double-click the file that the Software Analyzer mentions. Inspect the code and determine whether the warning affects your application.\n\n  ![context](images/context.jpg)\n\n  As you can see from the code, you're not using either of the two default initialContext JNDI properties that this warning mentions. You can ignore this warning and move to the next one.\n\n- Move to the Java Code Review section, which contains information about the use of system-provided third-party APIs.\n\n  ![winkresult](images/winkresult.jpg)\n\n- Click the detailed help and review the information.\n\n  ![winkhelp](images/winkhelp.jpg)\n\n  The information doesn't contain enough details to determine what the problem is. Click the link in the last sentence to open an IBM Knowledge Center page for WebSphere.\n\n  From the information in IBM Knowledge Center, you learn that you need to configure the Liberty server to give the application access to third-party libraries. To configure the server, you add the following code to the server.xml configuration file. You will add the code in the next task of this tutorial.\n\n  ```bash\n  <application id=\"customerOrderServicesApp\"\n   name=\"CustomerOrderServicesApp.ear\" type=\"ear\"\n   location=\"${shared.app.dir}/CustomerOrderServicesApp.ear\">\n  <classloader apiTypeVisibility=\"spec, ibm-api, third-party\"/>\n  </application>\n  ```\n\n  The code allows the classloader to access the third-party libraries that are included with Liberty. For the application to work correctly, the classloader must be able to access the Jackson and Apache Wink libraries.\n\n- Examime the results related to the behavior change for lookups on Enterprise JavaBeans.\n\n  ![jpa](images/ejb3.jpg)\n\n- Review the Detailed Help describing the issue.\n\n- Replace the `ejblocal` lookup for `ProductSearchService` with the lookup below and save your changes:\n\n  ```bash\n  java:app/CustomerOrderServices/ProductSearchServiceImpl!org.pwte.example.service.ProductSearchService\n  ```\n\n- Replace the `ejblocal` lookup for `CustomerOrderServices` with the lookup below and save your changes:\n\n  ```bash\n  java:app/CustomerOrderServices/CustomerOrderServicesImpl!org.pwte.example.service.CustomerOrderServices\n  ```\n\n- Examine the last part of the Java Code Review:\n\n  ![jpa](images/jpa.jpg)\n\n  As you can see in the details, the change in the JPA cascade strategy is not expected to affect most applications. You can mitigate the cascade strategy by reverting to the previous behavior. In the persistence.xml file, set the openjpa.Compatibility property.\n\n  You can configure newer versions of WebSphere Application Server to run on previous versions of most of the JEE technologies. JPA is one of those technologies. In this exercise we will be using the jpa-2.0 feature, so the warning doesn't affect your application.\n\n- Move to the XML File Review section in the Software Analyzer results. A problem exists due to a behavior change on lookups for Enterprise JavaBeans. Review the detailed help.\n\n- Click the file that is related to the error. Change to the `source` view. Notice that you're using the WebSphere Application Server traditional namespaces for the EJB binding:\n\n  ![ejb](images/ejb.jpg)\n\n  You need to change the EJB binding as follows:\n  `java:app/CustomerOrderServices/ProductSearchServiceImpl!org.pwte.example.service.ProductSearchService`\n\n  ![ejb](images/ejb2.jpg)\n\n- Save and close the file.\n\n- Rerun the Software Analysis and ensure that the severe results have been addressed and no longer show in the analysis results.\n\n  ![ejb](images/analysis2.jpg)\n\n### Run the modified Application\n\n#### Configure the WebSphere Liberty Server\n- Open the default `server.xml` file that was created when you created the `Lab5` server earlier.\n\n    - In the `Servers` view. open the `Lab5` server\n\n    - Double-click on 'Server Configuration'\n\n    - Switch to the 'Source' view\n\n- Replace the contents as shown below:\n\n    ```\n    <server description=\"new server\">\n\n    <!-- Enable features -->\n    <featureManager>\n    <feature>jpa-2.0</feature>\n    <feature>jaxrs-1.1</feature>\n    <feature>jsonp-1.0</feature>\n    <feature>servlet-3.1</feature>\n    <feature>ejbLite-3.1</feature>\n    <feature>appSecurity-2.0</feature>\n    <feature>localConnector-1.0</feature>\n    <feature>jdbc-4.1</feature>\n    <feature>transportSecurity-1.0</feature>\n    </featureManager>\n\n    <!-- User and group security definitions -->\n    <basicRegistry id=\"basic\" realm=\"customRealm\">\n    <user name=\"rbarcia\" password=\"bl0wfish\"/>\n    <group name=\"SecureShopper\">\n    \t<member name=\"rbarcia\"/>\n    </group>\n    </basicRegistry>\n\n    <keyStore password=\"passw0rd\"></keyStore>\n\n    <authData id=\"DefaultNode01/CustOrderAuthAlias\" password=\"db2inst1\" user=\"db2inst1\"/>\n\n    <jdbcDriver id=\"DB2\" javax.sql.DataSource=\"com.ibm.db2.jcc.DB2ConnectionPoolDataSource\">\n    <library>\n        <file name=\"${shared.resource.dir}/lib/db2jcc.jar\"/>\n        <file name=\"${shared.resource.dir}/lib/db2jcc_license_cu.jar\"/>\n    </library>\n    </jdbcDriver>\n\n    <jdbcDriver id=\"DB2_XA\" javax.sql.DataSource=\"com.ibm.db2.jcc.DB2XADataSource\">\n    <library>\n        <file name=\"${shared.resource.dir}/lib/db2jcc.jar\"/>\n        <file name=\"${shared.resource.dir}/lib/db2jcc_license_cu.jar\"/>\n    </library>\n    </jdbcDriver>\n\n    <dataSource id=\"OrderDS\" jdbcDriverRef=\"DB2_XA\" jndiName=\"jdbc/orderds\" transactional=\"true\">\n    <properties.db2.jcc databaseName=\"ORDERDB\" serverName=\"169.62.108.167\" portNumber=\"31955\" user=\"db2inst1\" password=\"db2inst1\" />\n    <connectionManager agedTimeout=\"0\" connectionTimeout=\"180\" maxIdleTime=\"1800\" maxPoolSize=\"10\" minPoolSize=\"0\" reapTime=\"180\"/>\n    </dataSource>\n\n    <!-- To access this server from a remote client add a host attribute to the following element, e.g. host=\"*\" -->\n    <httpEndpoint host=\"*\" httpPort=\"9080\" httpsPort=\"9443\" id=\"defaultHttpEndpoint\"/>\n\n    <!-- Automatically expand WAR files and EAR files -->\n    <applicationManager autoExpand=\"true\"/>\n\n    <!-- Define application and its classloaders -->\n    <application id=\"customerOrderServicesApp\" location=\"${shared.app.dir}/CustomerOrderServicesApp.ear\" name=\"CustomerOrderServicesApp.ear\" type=\"ear\">\n    <classloader apiTypeVisibility=\"spec, ibm-api, third-party\"/>\n    </application>\n\n    </server>\n    ```\n\n- Review the `featureList`, `classLoader`, `basicRegistry` and `dataSource` configuration.\n\n<InlineNotification kind=\"info\">\n\n**Note:** The DB2 database used by this application is at `169.62.108.167` on port `31955`\n\n</InlineNotification>\n\n- Save the new `server.xml` file.\n\nIn AppMod Exercise 1 you cloned the https://github.com/ibm-cloud-architecture/icp-dev-workshop.git repository. In the `lab5` folder you will find a `libs` folder that contains the DB2 drivers.\n\n- Copy the `lib` folder from the `lab5` repo to `<wlp>/usr/shared/resources/lib` (where `<wlp>` is the location that you unzipped Liberty)\n\n  This should create `<wlp>/usr/shared/resources/lib/db2jcc.jar` and `<wlp>/usr/shared/resources/lib/db2jcc_license_cu.jar`\n\n- Export the EAR file from eclipse (we are doing this as there are known issues with running EAR files directly from the Eclipse Workspace)\n\n    - Right-click the CustomerOrderServicesApp project and select Export > EAR file.\n\n    - In the window that opens, set up the project to be exported as an EAR file\n\n    - For the name of the EAR project, type CustomerOrderServicesApp.\n\n    - For the destination, browse to `/opt/liberty/wlp/usr/shared/apps/CustomerOrderServicesApp.ear`.\n\n    - Select the Optimize for a specific server runtime check box and select WebSphere Application Server Liberty from the list.\n\n    - Select the Overwrite existing file check box in case another application already uses the file name that you specified.\n\n    - Click Finish.\n\n- Click the Servers tab. Right-click the `Lab5` server and click Start. The Console tab opens, where you can see the WebSphere Liberty output.\n\n- Note that the server failed to start due to missing older features.\n\n  ![failure](images/failure1.jpg)\n\n- Install the required features.\n\n    - Stop the `Lab5` server\n\n    - At the command line, navigate to the `<wlp>/bin` folder and issue the following command:\n\n    ```bash\n    ./installUtility install Lab5\n    ```\n\n- Restart the `Lab5` Liberty server in Eclipse\n\n- Find the links for the two web applications that are deployed to WebSphere Liberty. One application is a test project that you can ignore. The other application is the Customer Order Services application, which is accessible at http://localhost:9080/CustomerOrderServicesWeb/. Click that link or copy the link and paste it in a web browser.\n\n  ![failure](images/links.jpg)\n\n- You are prompted to log in because you added security for the application in the server.xml file.\n\n  For the user name, type `rbarcia`. For the password, type `bl0wfish`\n\n  After you log in to the application, the catalog is displayed (it may take a few seconds to display)\n\n  ![failure](images/app1.jpg)\n\n- However, if you look at the Console tab for WebSphere Liberty in Eclipse, errors are shown. Carefully review the errors. A problem exists with the data that is returned from the database.\n\n  ![failure](images/jpa-error.jpg)\n\n- The problem happens in the loadCustomer method in CustomerOrderServicesImpl.java. Look at that method. The method is trying to return an AbstractCustomer from the database:\n\n  ![failure](images/class.jpg)\n\n  The problem is in the AbstractCustomer class. As its name suggests, it's an abstract class, so it won't be instantiated. Look for the classes that extend the abstract class. Those classes are BusinessCustomer and ResidentialCustomer. If you remember the SQL error in the WebSphere Liberty Console log, it was about a value, Y, being returned as an integer. In the Java classes, you can see that some Boolean attributes that get values of Y and N are being returned as integers, causing the SQL exception.\n\n  The reason for this behavior is that the OpenJPA driver treats Booleans differently based on its version. In this case, the OpenJPA driver version that you're using in WebSphere Liberty does not automatically convert Y or N database values into Booleans. As a result, you need to store them as strings and check those strings to return a Boolean value:\n\n  ![bizCust](images/businessCustomer.jpg)\n\n  ![resCust](images/residentialCustomer.jpg)\n\n  Save all the changes, export the EAR project to the WebSphere Liberty folder, and restart the server.\n\n- Confirm that no errors are shown for the Customer Order Services application, either in the browser or on the Console tab for WebSphere Liberty in Eclipse.\n\n  ![noerrors](images/noerrors.jpg)\n\n- Stop the WebSphere Liberty server.\n\nThat's it. You now have this application running on Liberty in a Container. For next steps you would likely push this image to a Red Hat OpenShift Image Repository and deploy the application using the OpenLiberty Operator. If the client was interested in adding CI/CD automation you may also go back to the source code and automate CI and then automate deployment using CD.\n\n## Summary\n\nYou have now completed the second of two AppMod exercises. This exercise demonstrated a `runtime` modernization scenario that required some code changes.\n","type":"Mdx","contentDigest":"844bc85bca3edcc89da00c82314ddff9","counter":420,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Application Modernization - Exercise 2"},"exports":{},"rawBody":"---\ntitle: Application Modernization - Exercise 2\n---\n\n<PageDescription>\n\nAn example of a \"minimum code changes\" modernization of an existing traditional WebSphere ND application to Liberty running in a Docker Container.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink to=\"#environment-setup\">Environment Setup</AnchorLink>\n  <AnchorLink to=\"#analyze-the-scan-results\">Analyze the Scan Results</AnchorLink>\n  <AnchorLink to=\"#make-the-code-changes\">Make the code changes</AnchorLink>\n  <AnchorLink to=\"#run-the-modified-application\">Run the modified Application</AnchorLink>\n</AnchorLinks>\n\n## Business Need\n\nJust as with Application Modernization Exercise 1, Exercise 2 is an example of `runtime modernization` which doesn't address the technical debt in the application but does remove the technical debt provided by the Application Server itself. In this exercise you will learn the skills to make minor code changes to applications to move them from traditional WebSphere ND to \"the Cloud\". While this isn't the typical way that the Garage wants to engage with customers, it is going to be part of the overall modernization of their legacy Java portfolio and an important skill for you to have. You will use tools such as IBM Cloud Transformation Advisor and the Eclipse based WebSphere Migration Toolkit.\n\n## [MVP Statement](https://www.ibm.com/garage/method/practices/think/practice_minimum_viable_product/)\n\n- **Who:** Operations teams are tasked with moving from traditional WebSphere ND to \"the Cloud\" and have access to developers to make some minor changes to legacy Java applications to move them to the Cloud.\n\n- **What:** This application is used by a small number of customers and will be replaced in 18 months with a new version. The operations team needs to move to \"the Cloud\" now and wants to standardize on Docker containers that they can run anywhere.\n\n- **Wow:** With a few simple steps you can move an application and the associated configuration to a Liberty runtime in a Docker container with some minor code changes. This is something that can be repeated over and over in a factory type engagement.\n\n## [Architecture]()\n\nCustomer Order Services is a simple legacy monolith with a backend database (DB2).\n\n## Technical Requirements\n- This modernization exercise has the following requirements:\n\n    - Minor code changes\n    - The target is to get the application running on Liberty in a Docker container on your laptop\n    - The DB2 database will remain in it's current location (it is deployed in a container in the MOOC4 cluster exposed with a NodePort)\n\n## Guide\n- This exercise has the following steps\n\n    - Import provided scan results in to IBM Cloud Transformation Advisor running in your MOOC Red Hat OpenShift cluster.\n    - Review the IBM Cloud Transformation Advisor analysis\n    - Load the application source code in to Eclipse\n    - Use the WebSphere Migration Toolkit to support simple code changes\n    - Configure WebSphere Liberty to run the Application\n    - Unit Test and fix the Application\n\n## Solution Links\n\n### Environment Setup\n\n#### Install WebSphere Liberty Tools\n\n- Validate that you have JDK 8 (which is typically found in `/Library/Java/JavaVirtualMachines/`)\n\n    - If you don't have JDK 8 you can get it from here: https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n\n- Download Liberty from here: https://developer.ibm.com/wasdev/downloads/#asset/runtimes-wlp-javaee8\n\n- Install Eclipse from here: https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2019-09/R/eclipse-jee-2019-09-R-macosx-cocoa-x86_64.dmg\n\n- Use the `Eclipse Marketplace` to install `IBM WebSphere Application Server Migration Toolkit` and `IBM Liberty Development Tools 19.0.0.9` and restart Eclipse\n\n### Analyze the Scan Results\nIn this section you will upload the results from the IBM Cloud Transformation Advisor Data Collector to the IBM Cloud Transformation Advisor UI and analyze the findings.\n\n- Using your `IBM Garage for Cloud - Development Cluster Dashboard`, navigate to `Transformation Advisor`\n\n    ![apps](images/ta-dashboard.jpg)\n\n- You may receive an `Authentication endpoint is broken at the moment.` message. Copy the `URL` to a new `incognito` browser session to solve the problem\n\n- Use your existing workspace named `AppMod_{your initials}`\n\n- Add a new Collection named `Lab2`\n\nIn AppMod Exercise 1 you cloned the https://github.com/ibm-cloud-architecture/icp-dev-workshop.git repository. In the `lab5` folder you will find a `lab5.zip` file that contains the IBM Cloud Transformation Advisor Data Collector results.\n\n- Click `Upload data` and provide `lab5.zip`. After a few moments the results will be displayed as shown below:\n\n    ![ta](images/ta1.jpg)\n\n- Click on the `CustomerOrderServicesApp.ear` and review the detailed results. Review the `severe` results and use the `Analysis` report to locate the files you'll need to change.\n\n### Make the code changes\n\n#### Download the application code and import it into Eclipse\n\n- Clone the repository to your machine\n\n    ```bash\n    git clone https://github.com/ibm-cloud-architecture/refarch-jee-customerorder.git\n    ```\n\n- Checkout the source code:\n\n    ```bash\n    cd refarch-jee-customerorder\n    git checkout was70-dev\n    ```\n\n- Open eclipse, create a workspace and close the `Welcome` screen\n\n- In the `Servers` view, create a new Server\n\n- Select `IBM --> Liberty Server` and click Next\n\n  ![import](images/server.jpg)\n\n- Select `install from an archive or a repository` and then select a `JDK 8` for the `JRE` and click Next.\n\n  ![import](images/serverInstallFromArchive.jpg)\n\n- Enter the desired destination path, and point to the liberty zip you downloaded earlier in the `Install a new runtime environment from an archive:` section and click next.\n(you can also select `Download and install a new runtme environment from ibm.com` and select `WAS Liberty with Java EE 8 Full Platform` if you have not downloaded the Liberty zip yet)\n\n  ![import](images/serverDestinationPath.jpg)\n\n- In the Install Additional Content page, select the `Java EE 8 Full Platform Bundle` and click Next\n\n  ![import](images/serverBundle.jpg)\n\n- Click 'New...` to create a new server and change the `Server Name` to `Lab5` and then click Finish\n\n  ![import](images/server2.jpg)\n\n- Import the existing projects by:\n   * Clicking `File > Import`.\n   * In the `General folder`, click `Existing Projects into Workspace`.\n   * Click `Next`.\n   * In the `Select root directory field`, enter the location that you cloned the repository to such as `/lab5/refarch-jee-customerorder` and click `Browse`.\n   * Click `Finish`\n\n   ![import](images/import.jpg)\n\n   * In the Workspace Migration window, click `Cancel`. In the migration cancel window, click `OK`.\n\n#### Clean up the development environment\nWhen you create a Liberty development environment, you might need to fix installation paths and development tool versions that differ from the original development environment. When you imported the project to Eclipse, any errors were highlighted with red error marks.\n\n![import](images/eclipse1.jpg)\n\n- To view the problems in your workspace, click `Window > Show View > Other > General > Problems`. Click `OK`.\n\nErrors are shown for each of the projects that are related to the build path. In the projects for the new development environment, you need to update the references to the Java and WebSphere libraries which can be done automatically by setting the `Target Runtime`\n\n- Fix the targeted runtime for the application using these steps:\n\n    * Right-click on `CustomerOrderServicesApp` and click Properties.\n\n    * In the Properties window, click `Targeted Runtimes`\n\n    * De-select `WebSphere Application Server traditional V7.0`\n\n    * Select `Liberty Runtime`\n\n    * Click `Apply and Close`\n\n  ![libraries](images/targetruntime.jpg)\n\n- After updating the target runtime, clean and rebuild the entire workspace by clicking `Project > Clean`. Make sure that Clean all projects is selected and click `OK`.\n\n- Look at the Problems view again:\n\n    ![libraries](images/problems1.jpg)\n\n- You resolved several problems, but a few problems still exist. In this case, you want to fix the Xpath is invalid error. To fix that error:\n\n    * Right-click the `CustomerOrderServicesWeb` project and click `Properties`.\n\n    * In the properties window, click `Validation`\n\n    * Scroll to the `XSL Validator` and clear the `Manual` and `Build` options.\n\n    * Click `Apply and Close`.\n\n    ![validation](images/validation.jpg)\n\n- Clean and rebuild the entire workspace\n\n- Look at the Problems view again:\n\n- Now the projects have built without problems.\n\n#### Configure the Software Analyzer\nIn this task, you configure the Software Analyzer that is part of the WebSphere Application Server Migration Toolkit.\n\n- In your Eclipse environment, click Run > Analysis. The Software Analyzer opens.\n\n- Right-click Software Analyzer and select New. Type a name for the new configuration and click the Rules tab for the configuration.\n\n- From the Rule Set menu, select WebSphere Application Server Version Migration and click Set. The \"Rule set configuration\" window opens.\n\n    ![wink](images/analyzer1.jpg)\n\n- Configure the settings so that the appropriate rules, based on your migration requirements, are applied when your applications are analyzed.\n\n    ![wink](images/analyzer2.jpg)\n\n- When you're finished, click OK.\n\n#### Run the Software Analyzer\n- Click Analyze. After you run the Software Analyzer, the Software Analyzer Results tab is shown. The Software Analyzer rules and any errors and warnings are sorted in four categories: Java Code Review, XML File Review, JSP Code Review and File Review. Review each of the categories to determine whether code or configuration changes might be needed.\n\n  ![wink](images/analysis1a.jpg)\n\n- Click the File Review tab. The tab is empty\n\n- Click the Java Code Review tab. Warnings are shown for these aspects the WebSphere Application Migration Toolkit:\n\n  ![javacode](images/javacode.jpg)\n\n  Let's start with the warning about the default initalContext JNDI properties. View the information about the rule that flagged each error or warning by clicking Help > Show Contextual Help.\n\n  To understand more about the problem, click it and read the Help information.\n\n  Tip: If you need more information, click the detailed help link:\n\n  ![help](images/help.jpg)\n\n- When you understand what the problem is, double-click the file that the Software Analyzer mentions. Inspect the code and determine whether the warning affects your application.\n\n  ![context](images/context.jpg)\n\n  As you can see from the code, you're not using either of the two default initialContext JNDI properties that this warning mentions. You can ignore this warning and move to the next one.\n\n- Move to the Java Code Review section, which contains information about the use of system-provided third-party APIs.\n\n  ![winkresult](images/winkresult.jpg)\n\n- Click the detailed help and review the information.\n\n  ![winkhelp](images/winkhelp.jpg)\n\n  The information doesn't contain enough details to determine what the problem is. Click the link in the last sentence to open an IBM Knowledge Center page for WebSphere.\n\n  From the information in IBM Knowledge Center, you learn that you need to configure the Liberty server to give the application access to third-party libraries. To configure the server, you add the following code to the server.xml configuration file. You will add the code in the next task of this tutorial.\n\n  ```bash\n  <application id=\"customerOrderServicesApp\"\n   name=\"CustomerOrderServicesApp.ear\" type=\"ear\"\n   location=\"${shared.app.dir}/CustomerOrderServicesApp.ear\">\n  <classloader apiTypeVisibility=\"spec, ibm-api, third-party\"/>\n  </application>\n  ```\n\n  The code allows the classloader to access the third-party libraries that are included with Liberty. For the application to work correctly, the classloader must be able to access the Jackson and Apache Wink libraries.\n\n- Examime the results related to the behavior change for lookups on Enterprise JavaBeans.\n\n  ![jpa](images/ejb3.jpg)\n\n- Review the Detailed Help describing the issue.\n\n- Replace the `ejblocal` lookup for `ProductSearchService` with the lookup below and save your changes:\n\n  ```bash\n  java:app/CustomerOrderServices/ProductSearchServiceImpl!org.pwte.example.service.ProductSearchService\n  ```\n\n- Replace the `ejblocal` lookup for `CustomerOrderServices` with the lookup below and save your changes:\n\n  ```bash\n  java:app/CustomerOrderServices/CustomerOrderServicesImpl!org.pwte.example.service.CustomerOrderServices\n  ```\n\n- Examine the last part of the Java Code Review:\n\n  ![jpa](images/jpa.jpg)\n\n  As you can see in the details, the change in the JPA cascade strategy is not expected to affect most applications. You can mitigate the cascade strategy by reverting to the previous behavior. In the persistence.xml file, set the openjpa.Compatibility property.\n\n  You can configure newer versions of WebSphere Application Server to run on previous versions of most of the JEE technologies. JPA is one of those technologies. In this exercise we will be using the jpa-2.0 feature, so the warning doesn't affect your application.\n\n- Move to the XML File Review section in the Software Analyzer results. A problem exists due to a behavior change on lookups for Enterprise JavaBeans. Review the detailed help.\n\n- Click the file that is related to the error. Change to the `source` view. Notice that you're using the WebSphere Application Server traditional namespaces for the EJB binding:\n\n  ![ejb](images/ejb.jpg)\n\n  You need to change the EJB binding as follows:\n  `java:app/CustomerOrderServices/ProductSearchServiceImpl!org.pwte.example.service.ProductSearchService`\n\n  ![ejb](images/ejb2.jpg)\n\n- Save and close the file.\n\n- Rerun the Software Analysis and ensure that the severe results have been addressed and no longer show in the analysis results.\n\n  ![ejb](images/analysis2.jpg)\n\n### Run the modified Application\n\n#### Configure the WebSphere Liberty Server\n- Open the default `server.xml` file that was created when you created the `Lab5` server earlier.\n\n    - In the `Servers` view. open the `Lab5` server\n\n    - Double-click on 'Server Configuration'\n\n    - Switch to the 'Source' view\n\n- Replace the contents as shown below:\n\n    ```\n    <server description=\"new server\">\n\n    <!-- Enable features -->\n    <featureManager>\n    <feature>jpa-2.0</feature>\n    <feature>jaxrs-1.1</feature>\n    <feature>jsonp-1.0</feature>\n    <feature>servlet-3.1</feature>\n    <feature>ejbLite-3.1</feature>\n    <feature>appSecurity-2.0</feature>\n    <feature>localConnector-1.0</feature>\n    <feature>jdbc-4.1</feature>\n    <feature>transportSecurity-1.0</feature>\n    </featureManager>\n\n    <!-- User and group security definitions -->\n    <basicRegistry id=\"basic\" realm=\"customRealm\">\n    <user name=\"rbarcia\" password=\"bl0wfish\"/>\n    <group name=\"SecureShopper\">\n    \t<member name=\"rbarcia\"/>\n    </group>\n    </basicRegistry>\n\n    <keyStore password=\"passw0rd\"></keyStore>\n\n    <authData id=\"DefaultNode01/CustOrderAuthAlias\" password=\"db2inst1\" user=\"db2inst1\"/>\n\n    <jdbcDriver id=\"DB2\" javax.sql.DataSource=\"com.ibm.db2.jcc.DB2ConnectionPoolDataSource\">\n    <library>\n        <file name=\"${shared.resource.dir}/lib/db2jcc.jar\"/>\n        <file name=\"${shared.resource.dir}/lib/db2jcc_license_cu.jar\"/>\n    </library>\n    </jdbcDriver>\n\n    <jdbcDriver id=\"DB2_XA\" javax.sql.DataSource=\"com.ibm.db2.jcc.DB2XADataSource\">\n    <library>\n        <file name=\"${shared.resource.dir}/lib/db2jcc.jar\"/>\n        <file name=\"${shared.resource.dir}/lib/db2jcc_license_cu.jar\"/>\n    </library>\n    </jdbcDriver>\n\n    <dataSource id=\"OrderDS\" jdbcDriverRef=\"DB2_XA\" jndiName=\"jdbc/orderds\" transactional=\"true\">\n    <properties.db2.jcc databaseName=\"ORDERDB\" serverName=\"169.62.108.167\" portNumber=\"31955\" user=\"db2inst1\" password=\"db2inst1\" />\n    <connectionManager agedTimeout=\"0\" connectionTimeout=\"180\" maxIdleTime=\"1800\" maxPoolSize=\"10\" minPoolSize=\"0\" reapTime=\"180\"/>\n    </dataSource>\n\n    <!-- To access this server from a remote client add a host attribute to the following element, e.g. host=\"*\" -->\n    <httpEndpoint host=\"*\" httpPort=\"9080\" httpsPort=\"9443\" id=\"defaultHttpEndpoint\"/>\n\n    <!-- Automatically expand WAR files and EAR files -->\n    <applicationManager autoExpand=\"true\"/>\n\n    <!-- Define application and its classloaders -->\n    <application id=\"customerOrderServicesApp\" location=\"${shared.app.dir}/CustomerOrderServicesApp.ear\" name=\"CustomerOrderServicesApp.ear\" type=\"ear\">\n    <classloader apiTypeVisibility=\"spec, ibm-api, third-party\"/>\n    </application>\n\n    </server>\n    ```\n\n- Review the `featureList`, `classLoader`, `basicRegistry` and `dataSource` configuration.\n\n<InlineNotification kind=\"info\">\n\n**Note:** The DB2 database used by this application is at `169.62.108.167` on port `31955`\n\n</InlineNotification>\n\n- Save the new `server.xml` file.\n\nIn AppMod Exercise 1 you cloned the https://github.com/ibm-cloud-architecture/icp-dev-workshop.git repository. In the `lab5` folder you will find a `libs` folder that contains the DB2 drivers.\n\n- Copy the `lib` folder from the `lab5` repo to `<wlp>/usr/shared/resources/lib` (where `<wlp>` is the location that you unzipped Liberty)\n\n  This should create `<wlp>/usr/shared/resources/lib/db2jcc.jar` and `<wlp>/usr/shared/resources/lib/db2jcc_license_cu.jar`\n\n- Export the EAR file from eclipse (we are doing this as there are known issues with running EAR files directly from the Eclipse Workspace)\n\n    - Right-click the CustomerOrderServicesApp project and select Export > EAR file.\n\n    - In the window that opens, set up the project to be exported as an EAR file\n\n    - For the name of the EAR project, type CustomerOrderServicesApp.\n\n    - For the destination, browse to `/opt/liberty/wlp/usr/shared/apps/CustomerOrderServicesApp.ear`.\n\n    - Select the Optimize for a specific server runtime check box and select WebSphere Application Server Liberty from the list.\n\n    - Select the Overwrite existing file check box in case another application already uses the file name that you specified.\n\n    - Click Finish.\n\n- Click the Servers tab. Right-click the `Lab5` server and click Start. The Console tab opens, where you can see the WebSphere Liberty output.\n\n- Note that the server failed to start due to missing older features.\n\n  ![failure](images/failure1.jpg)\n\n- Install the required features.\n\n    - Stop the `Lab5` server\n\n    - At the command line, navigate to the `<wlp>/bin` folder and issue the following command:\n\n    ```bash\n    ./installUtility install Lab5\n    ```\n\n- Restart the `Lab5` Liberty server in Eclipse\n\n- Find the links for the two web applications that are deployed to WebSphere Liberty. One application is a test project that you can ignore. The other application is the Customer Order Services application, which is accessible at http://localhost:9080/CustomerOrderServicesWeb/. Click that link or copy the link and paste it in a web browser.\n\n  ![failure](images/links.jpg)\n\n- You are prompted to log in because you added security for the application in the server.xml file.\n\n  For the user name, type `rbarcia`. For the password, type `bl0wfish`\n\n  After you log in to the application, the catalog is displayed (it may take a few seconds to display)\n\n  ![failure](images/app1.jpg)\n\n- However, if you look at the Console tab for WebSphere Liberty in Eclipse, errors are shown. Carefully review the errors. A problem exists with the data that is returned from the database.\n\n  ![failure](images/jpa-error.jpg)\n\n- The problem happens in the loadCustomer method in CustomerOrderServicesImpl.java. Look at that method. The method is trying to return an AbstractCustomer from the database:\n\n  ![failure](images/class.jpg)\n\n  The problem is in the AbstractCustomer class. As its name suggests, it's an abstract class, so it won't be instantiated. Look for the classes that extend the abstract class. Those classes are BusinessCustomer and ResidentialCustomer. If you remember the SQL error in the WebSphere Liberty Console log, it was about a value, Y, being returned as an integer. In the Java classes, you can see that some Boolean attributes that get values of Y and N are being returned as integers, causing the SQL exception.\n\n  The reason for this behavior is that the OpenJPA driver treats Booleans differently based on its version. In this case, the OpenJPA driver version that you're using in WebSphere Liberty does not automatically convert Y or N database values into Booleans. As a result, you need to store them as strings and check those strings to return a Boolean value:\n\n  ![bizCust](images/businessCustomer.jpg)\n\n  ![resCust](images/residentialCustomer.jpg)\n\n  Save all the changes, export the EAR project to the WebSphere Liberty folder, and restart the server.\n\n- Confirm that no errors are shown for the Customer Order Services application, either in the browser or on the Console tab for WebSphere Liberty in Eclipse.\n\n  ![noerrors](images/noerrors.jpg)\n\n- Stop the WebSphere Liberty server.\n\nThat's it. You now have this application running on Liberty in a Container. For next steps you would likely push this image to a Red Hat OpenShift Image Repository and deploy the application using the OpenLiberty Operator. If the client was interested in adding CI/CD automation you may also go back to the source code and automate CI and then automate deployment using CD.\n\n## Summary\n\nYou have now completed the second of two AppMod exercises. This exercise demonstrated a `runtime` modernization scenario that required some code changes.\n","fileAbsolutePath":"/Users/bwoolf/dev/git/ibm-garage-cloud/ibm-garage-developer-guide/src/pages/practical/appmod-exercise2/index.mdx"}}}}